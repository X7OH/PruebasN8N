{"createdAt":"2025-10-02T21:30:40.696Z","updatedAt":"2025-10-05T21:46:42.000Z","id":"0u1fJDhwD9M96Ze4","name":"My workflow 7","active":false,"isArchived":false,"nodes":[{"parameters":{"method":"POST","url":"https://admchat.duckdns.org/wa-decrypt/decrypt-image","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"specifyBody":"json","jsonBody":"{\n    \"mimetype\": \"image/jpeg\",\n    \"mediaKey\": \"kvEEi7CUk0/bfW1zN/TQUrwWVPiJGsXBE9yXdzysOik=\",\n    \"fileEncSha256\": \"L0/oiPRtRxmF7xGuEkg0t5Wo/iuc0Z/W2PKmnbJqLkA=\",\n    \"fileSha256\": \"iF2kEZ7F/cCMLa1awM42Ap4PqY6NOSVUYFmMTkj73zo=\",\n    \"mediaKeyTimestamp\": 1759697758,\n    \"directPath\": \"/o1/v/t24/f2/m237/AQO-pKl386Me6PJZbPIih-uGsDqfQxNCRJzh5MDZTNcDudIRU8-XiWCUaJKAUree-mPK4wplsJBvDpkmnffSe86vcAQDAlCtgh7kMWQUPA?ccb=9-4&oh=01_Q5Aa2gElYuOjK1QY3xX4kuFrc8yMVFrPSP_dCSOpTNckY6RbTA&oe=690A5BA1&_nc_sid=e6ed6c\"\n  }","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[560,-112],"id":"6cc32d16-07de-49b9-a5e0-5fd34f186b24","name":"HTTP Request"},{"parameters":{"resource":"image","operation":"analyze","modelId":{"__rl":true,"value":"models/gemini-2.5-flash","mode":"list","cachedResultName":"models/gemini-2.5-flash"},"text":"que hay en la imagen?","inputType":"binary","options":{}},"type":"@n8n/n8n-nodes-langchain.googleGemini","typeVersion":1,"position":[816,-112],"id":"5c91d387-4183-4116-bc30-6f0e9fe35f4d","name":"Analyze image","credentials":{"googlePalmApi":{"id":"TrLuzSuO4YLOIyM8","name":"Google Gemini(PaLM) Api account 2"}}},{"parameters":{"jsCode":"// Clasifica: 'texto' | 'imagen' | 'audio' y arma datos mÃ­nimos para las ramas.\n// Compatible con tus ejemplos Baileys recibidos en body.{...}\n\nfunction unwrap(m) {\n  if (!m) return m;\n  if (m.ephemeralMessage?.message) return unwrap(m.ephemeralMessage.message);\n  if (m.viewOnceMessage?.message) return unwrap(m.viewOnceMessage.message);\n  if (m.viewOnceMessageV2?.message) return unwrap(m.viewOnceMessageV2.message);\n  return m;\n}\n\nfunction detectar(body) {\n  const msg = unwrap(body?.message || {});\n  if (!msg) return { kind: 'desconocido', text: '', media: null, raw: body };\n\n  // AUDIO\n  if (msg.audioMessage) {\n    const a = msg.audioMessage;\n    const url = a.url || '';\n    return {\n      kind: 'audio',\n      text: '', // no hay texto en nota de voz\n      media: {\n        url,\n        mimetype: a.mimetype || null,\n        encrypted: url.includes('.enc'),  // en tus ejemplos: true\n        mediaKey: a.mediaKey || null,\n        seconds: typeof a.seconds === 'number' ? a.seconds : null,\n        ptt: Boolean(a.ptt)\n      },\n      raw: body\n    };\n  }\n\n  // IMAGEN (con/sin caption)\n  if (msg.imageMessage) {\n    const i = msg.imageMessage;\n    const url = i.url || '';\n    return {\n      kind: 'imagen',\n      text: i.caption || '', // \"Pago\" en tu ejemplo\n      media: {\n        url,\n        mimetype: i.mimetype || null,\n        encrypted: url.includes('.enc'),  // true en tus ejemplos\n        mediaKey: i.mediaKey || null,\n      },\n      raw: body\n    };\n  }\n\n  // TEXTO\n  if (msg.conversation || msg.extendedTextMessage?.text) {\n    return {\n      kind: 'texto',\n      text: msg.conversation || msg.extendedTextMessage?.text || '',\n      media: null,\n      raw: body\n    };\n  }\n\n  return { kind: 'desconocido', text: '', media: null, raw: body };\n}\n\nreturn items.map(it => {\n  const body = it.json?.body ?? it.json;\n  const out = detectar(body);\n  const ts = body?.messageTimestamp ? new Date(Number(body.messageTimestamp) * 1000).toISOString() : null;\n\n  return {\n    json: {\n      kind: out.kind,\n      text: out.text,\n      media: out.media,\n      raw: out.raw,\n      sender: {\n        name: body?.pushName || '',\n        remoteJid: body?.key?.remoteJid || '',\n        fromMe: Boolean(body?.key?.fromMe),\n        id: body?.key?.id || null,\n      },\n      timestamp: ts\n    }\n  };\n});\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[352,-112],"id":"677edb68-ce3a-4dc6-a286-2b997ed1fa72","name":"Code1"},{"parameters":{"httpMethod":"POST","path":"mensajes","responseMode":"lastNode","options":{}},"type":"n8n-nodes-base.webhook","typeVersion":2,"position":[144,-112],"id":"d68ddefb-8061-4641-be51-884026c7d847","name":"Webhook1","webhookId":"768b9e6a-6baa-4c5b-8ae9-4e5f596eac72"}],"connections":{"HTTP Request":{"main":[[{"node":"Analyze image","type":"main","index":0}]]},"Code1":{"main":[[{"node":"HTTP Request","type":"main","index":0}]]},"Webhook1":{"main":[[{"node":"Code1","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"612e8822-ec74-4b2a-b3e3-dcbd614c1d46","triggerCount":0,"shared":[{"createdAt":"2025-10-02T21:30:40.703Z","updatedAt":"2025-10-02T21:30:40.703Z","role":"workflow:owner","workflowId":"0u1fJDhwD9M96Ze4","projectId":"Bev2pwmvUzes1BM7"}],"tags":[]}