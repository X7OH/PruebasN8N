{"createdAt":"2025-09-24T16:06:57.684Z","updatedAt":"2025-10-07T19:28:50.000Z","id":"cRJ8nUwN9IN6jhWs","name":"MaestroCategoriasProductos","active":false,"isArchived":false,"nodes":[{"parameters":{},"type":"n8n-nodes-base.manualTrigger","typeVersion":1,"position":[-272,336],"id":"2ba3e0d4-a473-4e82-8a70-f6bbf8b1179a","name":"When clicking ‚ÄòExecute workflow‚Äô"},{"parameters":{"documentId":{"__rl":true,"value":"1DqbXWJJqu3Z-1LlYhbbn5BwpR1DqT7WrrluwPeS43aQ","mode":"list","cachedResultName":"CategoriasProductos","cachedResultUrl":"https://docs.google.com/spreadsheets/d/1DqbXWJJqu3Z-1LlYhbbn5BwpR1DqT7WrrluwPeS43aQ/edit?usp=drivesdk"},"sheetName":{"__rl":true,"value":882738556,"mode":"list","cachedResultName":"Productos","cachedResultUrl":"https://docs.google.com/spreadsheets/d/1DqbXWJJqu3Z-1LlYhbbn5BwpR1DqT7WrrluwPeS43aQ/edit#gid=882738556"},"options":{}},"type":"n8n-nodes-base.googleSheets","typeVersion":4.7,"position":[2128,-336],"id":"ac3926a1-0d33-4d06-8537-d747f6dd206a","name":"Productos","credentials":{"googleSheetsOAuth2Api":{"id":"hXtG2Lkk5qYTHIdj","name":"TestSidesoft"}}},{"parameters":{"jsCode":"// Valida SOLO 'Codigo' y 'Nombre'\n// Reglas\nconst maxLen = { Codigo: 40, Nombre: 60 };\n// Permitidos: letras (incluye tildes/√±), n√∫meros, espacio, guion -, punto, coma,\n// dos puntos, ;, @, #, /, par√©ntesis. (NO permite \"_\")\nconst allowedClass = \"A-Za-z0-9√Å√â√ç√ì√ö√ú√ë√°√©√≠√≥√∫√º√± \\\\-\\\\.,:;@#\\\\/()$\";\nconst invalidCharRegex = new RegExp(`[^${allowedClass}]`, \"g\");\nconst newlineRegex = /[\\r\\n\\v\\f\\u0085\\u2028\\u2029]/;\n\n// === Duplicados ===\n// Normalizar comparaci√≥n de duplicados: sin tildes, en may√∫sculas y espacios colapsados\nconst normalizarDuplicados = true;\nconst normalizeForDup = (s) => {\n  if (!normalizarDuplicados) return s.toString().trim();\n  return s\n    .toString()\n    .trim()\n    .normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") // sin tildes\n    .toUpperCase()\n    .replace(/\\s+/g, \" \"); // colapsa espacios internos\n};\n\n// Mapas para duplicados: key normalizada -> { rows: number[], muestra: string }\nconst dupCodigo = new Map();\nconst dupNombre = new Map();\n\nconst errores = [];\n\nfor (let i = 0; i < items.length; i++) {\n  const row = items[i].json || {};\n  const rowNumber = row.row_number ?? (i + 2); // asume encabezado en fila 1\n\n  for (const col of [\"Codigo\", \"Nombre\", \"Descripcion\", \"Descripci√≥n FE\"]) {\n    const valRaw = (row[col] ?? \"\").toString();\n    const val = valRaw.trim();\n    const len = val.length;\n\n    // Longitud (solo aplica cuando hay regla definida)\n    if (maxLen[col] !== undefined && len > maxLen[col]) {\n      errores.push(`Columna \"${col}\" en fila ${rowNumber} (${len} > ${maxLen[col]})`);\n    }\n\n    // Saltos de l√≠nea (incluye separadores Unicode)\n    if (newlineRegex.test(valRaw)) {\n      errores.push(`Columna \"${col}\" en fila ${rowNumber} contiene salto(s) de l√≠nea`);\n    }\n\n    // Caracteres no permitidos (incluye \"_\")\n    const bad = val.match(invalidCharRegex);\n    if (bad) {\n      const unicos = [...new Set(bad)].join(\"\");\n      errores.push(`Columna \"${col}\" en fila ${rowNumber} contiene caracteres no permitidos [${unicos}]`);\n    }\n\n    // Acumular para duplicados en Codigo / Nombre\n    if (col === \"Codigo\" && val) {\n      const k = normalizeForDup(val);\n      if (!dupCodigo.has(k)) dupCodigo.set(k, { rows: [], muestra: val });\n      dupCodigo.get(k).rows.push(rowNumber);\n    }\n    if (col === \"Nombre\" && val) {\n      const k = normalizeForDup(val);\n      if (!dupNombre.has(k)) dupNombre.set(k, { rows: [], muestra: val });\n      dupNombre.get(k).rows.push(rowNumber);\n    }\n  }\n}\n\n// Reporte de duplicados (solo si hay m√°s de una ocurrencia)\nfor (const info of dupCodigo.values()) {\n  if (info.rows.length > 1) {\n    errores.push(`Duplicado en columna \"Codigo\": valor \"${info.muestra}\" en filas ${info.rows.join(\", \")}`);\n  }\n}\nfor (const info of dupNombre.values()) {\n  if (info.rows.length > 1) {\n    errores.push(`Duplicado en columna \"Nombre\": valor \"${info.muestra}\" en filas ${info.rows.join(\", \")}`);\n  }\n}\n\n// Salida √∫nica con resumen\nreturn [{\n  json: {\n    mensaje: errores.length\n      ? `PRODUCTOS - üö´ Errores encontrados:\\n- ${errores.join('\\n- ')}`\n      : 'PRODUCTOS - ‚úÖ Todo Correcto',\n    totalErrores: errores.length\n  }\n}];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2368,-336],"id":"1ebc3e92-e605-4fc5-a832-1100c39087a8","name":"Code1","alwaysOutputData":false,"executeOnce":false},{"parameters":{"method":"POST","url":"https://agileapichat.sidesoftcorp.com/api/messages/send","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Authorization","value":"Bearer pmo"},{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"bodyParameters":{"parameters":[{"name":"number","value":"=0987525109"},{"name":"body","value":"={{ $('Unificar Errores Productos').item.json.mensaje }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[4816,-256],"id":"e255a99f-1f69-4b35-a26c-ed946e9337ea","name":"Confirmacion","executeOnce":false},{"parameters":{"operation":"executeQuery","query":"SELECT name FROM M_Product_Category where isactive='Y'","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[2576,-32],"id":"f33a0dfe-f990-4aba-a96a-b76ff41036b0","name":"ProductCategory","executeOnce":true,"credentials":{"postgres":{"id":"yuQbEbYhio1ra0Ss","name":"GasoManta-CafeMar"}}},{"parameters":{"operation":"executeQuery","query":"select name  from c_taxcategory  where isactive='Y'","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[2928,-32],"id":"05de25bb-760c-4f1c-b0af-a185d6a26066","name":"TaxCategory","executeOnce":true,"credentials":{"postgres":{"id":"yuQbEbYhio1ra0Ss","name":"GasoManta-CafeMar"}}},{"parameters":{"operation":"executeQuery","query":"select uomsymbol from c_uom where isactive='Y'","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[3296,-32],"id":"414c76ae-2a3b-46cd-8b34-d5d5d10ebe4a","name":"Unidad","executeOnce":true,"credentials":{"postgres":{"id":"yuQbEbYhio1ra0Ss","name":"GasoManta-CafeMar"}}},{"parameters":{"operation":"executeQuery","query":"select w.name \nfrom SSWH_Withholding_Source w \ninner join SSWH_Source ws on ws.SSWH_Withholding_Source_id = w.SSWH_Withholding_Source_ID \ninner join c_tax ct on ct.c_tax_ID = ws.c_tax_ID","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[3664,-32],"id":"3128b151-6e3b-4d9e-a7a3-28b14de72ff5","name":"Retencion","executeOnce":true,"credentials":{"postgres":{"id":"yuQbEbYhio1ra0Ss","name":"GasoManta-CafeMar"}}},{"parameters":{"operation":"executeQuery","query":"select ev.value \nfrom C_ValidCombination vc \nInner Join C_ElementValue ev on  ev.C_ElementValue_id = vc.account_id ","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[2400,-32],"id":"9ece0cc6-429b-49f6-bfb0-7007e3e69d70","name":"Cuentas","executeOnce":true,"credentials":{"postgres":{"id":"yuQbEbYhio1ra0Ss","name":"GasoManta-CafeMar"}}},{"parameters":{"jsCode":"// --- Config ---\nconst COLS = [\n  'Cta. Ingreso del producto',\n  'Cta. Gastos del producto',\n  'Cta. Inventario',\n  'Cta. Costo del producto',\n];\n\n// ¬øDeseas considerar vac√≠o como error?\nconst TREAT_EMPTY_AS_ERROR = false;\n\n// ¬øComparaci√≥n sin may/min√∫sculas?\nconst UPPERCASE_MATCH = false;\n\n// --- Helpers de normalizaci√≥n (todo a string y limpio) ---\nconst toStr = (v) => {\n  if (v === null || v === undefined) return '';\n  if (typeof v === 'string') return v;\n  if (typeof v === 'number' || typeof v === 'boolean') return String(v);\n  try { return JSON.stringify(v); } catch { return String(v); }\n};\n\nconst clean = (s) => {\n  let out = toStr(s);\n  out = out.replace(/\\u00A0/g, ' ');                 // NBSP -> espacio normal\n  out = out.replace(/[\\u200B-\\u200D\\uFEFF]/g, '');   // zero-width + BOM\n  out = out.replace(/[\\r\\n\\t]+/g, ' ');              // quita saltos/tabs\n  if (out.normalize) out = out.normalize('NFKC');    // normaliza unicode\n  out = out.trim().replace(/\\s+/g, ' ');             // colapsa espacios\n  if (UPPERCASE_MATCH) out = out.toUpperCase();\n  return out;\n};\n\n// 1) HOJA: solo 4 columnas (strings limpios) + _row\nconst hoja = ($items('Productos') || []).map((it, i) => {\n  const row = it.json || {};\n  const out = { _row: row.row_number ?? (i + 2) };   // asume encabezado en fila 1\n  for (const c of COLS) out[c] = clean(row[c]);\n  return out;\n});\n\n// 2) POSTGRES: array de strings (columna value), limpios + SET para b√∫squeda O(1)\nconst postgres = ($items('Cuentas') || [])\n  .map(it => it?.json?.value ?? it?.json?.VALUE ?? it?.json?.Value)\n  .map(clean)\n  .filter(v => v !== '');\nconst postgresSet = new Set(postgres);\n\n// 3) Comparar cada fila/columna contra postgresSet\nconst faltantes = [];\nconst hojaVal = hoja.map(r => {\n  const missingCols = [];\n  for (const col of COLS) {\n    const val = r[col]; // ya limpio\n    if (val === '' && !TREAT_EMPTY_AS_ERROR) continue;\n    if (!postgresSet.has(val)) {\n      missingCols.push({ columna: col, valor: val });\n      faltantes.push({ fila: r._row, columna: col, valor: val });\n    }\n  }\n  return { ...r, esValido: missingCols.length === 0, faltantes: missingCols };\n});\n\n// 4) Mensaje global\nconst mensaje = faltantes.length === 0\n  ? 'PRODUCTOS CATEGORIAS - Todo Correcto'\n  : 'PRODUCTOS CATEGORIAS - Errores encontrados:\\n- ' + faltantes\n      .map(e => `Fila ${e.fila} - Columna \"${e.columna}\" valor *${e.valor}* no existe en cat√°logo`)\n      .join('\\n- ');\n\nreturn [{ json: { mensaje } }];\n\n// 5) Salida √∫nica\n/**\n return [{\n  json: {\n    hoja: hojaVal,      // filas con validaci√≥n por fila\n    postgres,           // lista de cuentas v√°lidas\n    faltantes,          // plano: fila/columna/valor no encontrados\n    totalErrores: faltantes.length,\n    mensaje\n  }\n \n}];\n*/\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2752,-32],"id":"c6c27bdd-21d5-4d7f-bd49-aebcc7008dfb","name":"Code3"},{"parameters":{"jsCode":"// --- Config ---\nconst COLS = [\n  'Impuesto Venta',\n];\n\n// ¬øDeseas considerar vac√≠o como error?\nconst TREAT_EMPTY_AS_ERROR = false;\n\n// ¬øComparaci√≥n sin may/min√∫sculas?\nconst UPPERCASE_MATCH = false;\n\n// --- Helpers de normalizaci√≥n (todo a string y limpio) ---\nconst toStr = (v) => {\n  if (v === null || v === undefined) return '';\n  if (typeof v === 'string') return v;\n  if (typeof v === 'number' || typeof v === 'boolean') return String(v);\n  try { return JSON.stringify(v); } catch { return String(v); }\n};\n\nconst clean = (s) => {\n  let out = toStr(s);\n  out = out.replace(/\\u00A0/g, ' ');                 // NBSP -> espacio normal\n  out = out.replace(/[\\u200B-\\u200D\\uFEFF]/g, '');   // zero-width + BOM\n  out = out.replace(/[\\r\\n\\t]+/g, ' ');              // quita saltos/tabs\n  if (out.normalize) out = out.normalize('NFKC');    // normaliza unicode\n  out = out.trim().replace(/\\s+/g, ' ');             // colapsa espacios\n  if (UPPERCASE_MATCH) out = out.toUpperCase();\n  return out;\n};\n\n// 1) HOJA: solo 4 columnas (strings limpios) + _row\nconst hoja = ($items('Productos') || []).map((it, i) => {\n  const row = it.json || {};\n  const out = { _row: row.row_number ?? (i + 2) };   // asume encabezado en fila 1\n  for (const c of COLS) out[c] = clean(row[c]);\n  return out;\n});\n\n// 2) POSTGRES: array de strings (columna value), limpios + SET para b√∫squeda O(1)\nconst postgres = ($items('TaxCategory') || [])\n  .map(it => it?.json?.name ?? it?.json?.name ?? it?.json?.name)\n  .map(clean)\n  .filter(v => v !== '');\nconst postgresSet = new Set(postgres);\n\n// 3) Comparar cada fila/columna contra postgresSet\nconst faltantes = [];\nconst hojaVal = hoja.map(r => {\n  const missingCols = [];\n  for (const col of COLS) {\n    const val = r[col]; // ya limpio\n    if (val === '' && !TREAT_EMPTY_AS_ERROR) continue;\n    if (!postgresSet.has(val)) {\n      missingCols.push({ columna: col, valor: val });\n      faltantes.push({ fila: r._row, columna: col, valor: val });\n    }\n  }\n  return { ...r, esValido: missingCols.length === 0, faltantes: missingCols };\n});\n\n// 4) Mensaje global\nconst mensaje = faltantes.length === 0\n  ? 'PRODUCTOS IMPUESTOS - Todo Correcto'\n  : 'PRODUCTOS IMPUESTOS - Errores encontrados:\\n- ' + faltantes\n      .map(e => `Fila ${e.fila} - Columna \"${e.columna}\" valor *${e.valor}* no existe en cat√°logo`)\n      .join('\\n- ');\n\nreturn [{ json: { mensaje } }];\n\n// 5) Salida √∫nica\n/**\n return [{\n  json: {\n    hoja: hojaVal,      // filas con validaci√≥n por fila\n    postgres,           // lista de cuentas v√°lidas\n    faltantes,          // plano: fila/columna/valor no encontrados\n    totalErrores: faltantes.length,\n    mensaje\n  }\n \n}];\n*/\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[3120,-32],"id":"b9204536-2b0f-4865-b008-d3e272b6bb1b","name":"Code4"},{"parameters":{"jsCode":"// --- Config ---\nconst COLS = [\n  'Unidad de Medida',\n];\n\n// ¬øDeseas considerar vac√≠o como error?\nconst TREAT_EMPTY_AS_ERROR = false;\n\n// ¬øComparaci√≥n sin may/min√∫sculas?\nconst UPPERCASE_MATCH = false;\n\n// --- Helpers de normalizaci√≥n (todo a string y limpio) ---\nconst toStr = (v) => {\n  if (v === null || v === undefined) return '';\n  if (typeof v === 'string') return v;\n  if (typeof v === 'number' || typeof v === 'boolean') return String(v);\n  try { return JSON.stringify(v); } catch { return String(v); }\n};\n\nconst clean = (s) => {\n  let out = toStr(s);\n  out = out.replace(/\\u00A0/g, ' ');                 // NBSP -> espacio normal\n  out = out.replace(/[\\u200B-\\u200D\\uFEFF]/g, '');   // zero-width + BOM\n  out = out.replace(/[\\r\\n\\t]+/g, ' ');              // quita saltos/tabs\n  if (out.normalize) out = out.normalize('NFKC');    // normaliza unicode\n  out = out.trim().replace(/\\s+/g, ' ');             // colapsa espacios\n  if (UPPERCASE_MATCH) out = out.toUpperCase();\n  return out;\n};\n\n// 1) HOJA: solo 4 columnas (strings limpios) + _row\nconst hoja = ($items('Productos') || []).map((it, i) => {\n  const row = it.json || {};\n  const out = { _row: row.row_number ?? (i + 2) };   // asume encabezado en fila 1\n  for (const c of COLS) out[c] = clean(row[c]);\n  return out;\n});\n\n// 2) POSTGRES: array de strings (columna value), limpios + SET para b√∫squeda O(1)\nconst postgres = ($items('Unidad') || [])\n  .map(it => it?.json?.uomsymbol ?? it?.json?.uomsymbol ?? it?.json?.uomsymbol)\n  .map(clean)\n  .filter(v => v !== '');\nconst postgresSet = new Set(postgres);\n\n// 3) Comparar cada fila/columna contra postgresSet\nconst faltantes = [];\nconst hojaVal = hoja.map(r => {\n  const missingCols = [];\n  for (const col of COLS) {\n    const val = r[col]; // ya limpio\n    if (val === '' && !TREAT_EMPTY_AS_ERROR) continue;\n    if (!postgresSet.has(val)) {\n      missingCols.push({ columna: col, valor: val });\n      faltantes.push({ fila: r._row, columna: col, valor: val });\n    }\n  }\n  return { ...r, esValido: missingCols.length === 0, faltantes: missingCols };\n});\n\n// 4) Mensaje global\nconst mensaje = faltantes.length === 0\n  ? 'PRODUCTOS UNIDAD - Todo Correcto'\n  : 'PRODUCTOS UNIDAD - Errores encontrados:\\n- ' + faltantes\n      .map(e => `Fila ${e.fila} - Columna \"${e.columna}\" valor *${e.valor}* no existe en cat√°logo`)\n      .join('\\n- ');\n\nreturn [{ json: { mensaje } }];\n\n// 5) Salida √∫nica\n/**\n return [{\n  json: {\n    hoja: hojaVal,      // filas con validaci√≥n por fila\n    postgres,           // lista de cuentas v√°lidas\n    faltantes,          // plano: fila/columna/valor no encontrados\n    totalErrores: faltantes.length,\n    mensaje\n  }\n \n}];\n*/\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[3488,-32],"id":"7d1434b4-2744-4579-ab0f-d6ce7850a383","name":"Code5"},{"parameters":{"jsCode":"// --- Config ---\nconst COLS = [\n  'Retencion',\n];\n\n// ¬øDeseas considerar vac√≠o como error?\nconst TREAT_EMPTY_AS_ERROR = false;\n\n// ¬øComparaci√≥n sin may/min√∫sculas?\nconst UPPERCASE_MATCH = false;\n\n// --- Helpers de normalizaci√≥n (todo a string y limpio) ---\nconst toStr = (v) => {\n  if (v === null || v === undefined) return '';\n  if (typeof v === 'string') return v;\n  if (typeof v === 'number' || typeof v === 'boolean') return String(v);\n  try { return JSON.stringify(v); } catch { return String(v); }\n};\n\nconst clean = (s) => {\n  let out = toStr(s);\n  out = out.replace(/\\u00A0/g, ' ');                 // NBSP -> espacio normal\n  out = out.replace(/[\\u200B-\\u200D\\uFEFF]/g, '');   // zero-width + BOM\n  out = out.replace(/[\\r\\n\\t]+/g, ' ');              // quita saltos/tabs\n  if (out.normalize) out = out.normalize('NFKC');    // normaliza unicode\n  out = out.trim().replace(/\\s+/g, ' ');             // colapsa espacios\n  if (UPPERCASE_MATCH) out = out.toUpperCase();\n  return out;\n};\n\n// 1) HOJA: solo 4 columnas (strings limpios) + _row\nconst hoja = ($items('Productos') || []).map((it, i) => {\n  const row = it.json || {};\n  const out = { _row: row.row_number ?? (i + 2) };   // asume encabezado en fila 1\n  for (const c of COLS) out[c] = clean(row[c]);\n  return out;\n});\n\n// 2) POSTGRES: array de strings (columna value), limpios + SET para b√∫squeda O(1)\nconst postgres = ($items('Retencion') || [])\n  .map(it => it?.json?.name ?? it?.json?.name ?? it?.json?.name)\n  .map(clean)\n  .filter(v => v !== '');\nconst postgresSet = new Set(postgres);\n\n// 3) Comparar cada fila/columna contra postgresSet\nconst faltantes = [];\nconst hojaVal = hoja.map(r => {\n  const missingCols = [];\n  for (const col of COLS) {\n    const val = r[col]; // ya limpio\n    if (val === '' && !TREAT_EMPTY_AS_ERROR) continue;\n    if (!postgresSet.has(val)) {\n      missingCols.push({ columna: col, valor: val });\n      faltantes.push({ fila: r._row, columna: col, valor: val });\n    }\n  }\n  return { ...r, esValido: missingCols.length === 0, faltantes: missingCols };\n});\n\n// 4) Mensaje global\nconst mensaje = faltantes.length === 0\n  ? 'PRODUCTOS RETENCION - Todo Correcto'\n  : 'PRODUCTOS RETENCION - Errores encontrados:\\n- ' + faltantes\n      .map(e => `Fila ${e.fila} - Columna \"${e.columna}\" valor *${e.valor}* no existe en cat√°logo`)\n      .join('\\n- ');\n\nreturn [{ json: { mensaje } }];\n\n// 5) Salida √∫nica\n/**\n return [{\n  json: {\n    hoja: hojaVal,      // filas con validaci√≥n por fila\n    postgres,           // lista de cuentas v√°lidas\n    faltantes,          // plano: fila/columna/valor no encontrados\n    totalErrores: faltantes.length,\n    mensaje\n  }\n \n}];\n*/\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[3856,-32],"id":"2d7cdb0d-0547-4abd-91ef-063a7b64c1e7","name":"Code6"},{"parameters":{"numberInputs":6},"type":"n8n-nodes-base.merge","typeVersion":3.2,"position":[4432,-320],"id":"5500f4d1-6113-4346-b19d-025321345f5a","name":"Merge1"},{"parameters":{"documentId":{"__rl":true,"value":"1DqbXWJJqu3Z-1LlYhbbn5BwpR1DqT7WrrluwPeS43aQ","mode":"list","cachedResultName":"CategoriasProductos","cachedResultUrl":"https://docs.google.com/spreadsheets/d/1DqbXWJJqu3Z-1LlYhbbn5BwpR1DqT7WrrluwPeS43aQ/edit?usp=drivesdk"},"sheetName":{"__rl":true,"value":"gid=0","mode":"list","cachedResultName":"Categorias","cachedResultUrl":"https://docs.google.com/spreadsheets/d/1DqbXWJJqu3Z-1LlYhbbn5BwpR1DqT7WrrluwPeS43aQ/edit#gid=0"},"options":{}},"type":"n8n-nodes-base.googleSheets","typeVersion":4.7,"position":[624,320],"id":"3dfcdb67-bac9-4db6-b090-1f89a3206dec","name":"Categorias1","credentials":{"googleSheetsOAuth2Api":{"id":"hXtG2Lkk5qYTHIdj","name":"TestSidesoft"}}},{"parameters":{"jsCode":"// Entrada: items (filas de la hoja \"categorias\")\n// Salida: mismas filas, con strings limpiados (sin \\r/\\n y trim)\n\nconst out = [];\n\nfor (let i = 0; i < items.length; i++) {\n  const row = { ...(items[i].json || {}) };\n\n  for (const col of Object.keys(row)) {\n    if (col === 'row_number' || col === '_row') continue;\n\n    const val = row[col];\n\n    // Solo limpiar strings; no tocar n√∫meros/fechas/booleanos, etc.\n    if (typeof val === 'string') {\n      // 1) quitar saltos de l√≠nea en cualquier parte\n      // 2) trim al inicio y al final\n      row[col] = val.replace(/[\\r\\n]+/g, '').trim();\n    }\n  }\n\n  out.push({ json: row });\n}\n\nreturn out;\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[816,320],"id":"ba1772f6-6e9d-489c-86ab-7160418049b2","name":"Limpieza General"},{"parameters":{"operation":"executeQuery","query":"select ad_client_id from ad_client where ad_client_id not in ('0') ","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[256,320],"id":"b1702e80-3b93-46f4-8d53-4deae41c494b","name":"ADClient","executeOnce":true,"credentials":{"postgres":{"id":"yuQbEbYhio1ra0Ss","name":"GasoManta-CafeMar"}}},{"parameters":{"operation":"executeQuery","query":"select ad_org_id from ad_org where ad_org_id='0'","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[432,320],"id":"34bddb2a-817a-4bfb-a904-a435d4cb673e","name":"ADOrg","executeOnce":true,"credentials":{"postgres":{"id":"yuQbEbYhio1ra0Ss","name":"GasoManta-CafeMar"}}},{"parameters":{"operation":"executeQuery","query":"INSERT INTO M_PRODUCT_CATEGORY (m_product_category_id, ad_client_id, ad_org_id, isactive, created, createdby, updated, updatedby, value, name, description, isdefault, plannedmargin, issummary) \nVALUES (get_uuid(),'{{ $('ADClient').item.json.ad_client_id }}','{{ $('ADOrg').item.json.ad_org_id }}','Y',now(),'100',now(),'100','{{ $json.Codigo }}',trim('{{ $json.Nombre }}'),'{{ $json.Descripcion }}','{{ $json['Valor por defect'] }}',{{ $json['Nivel de Agrupaci√≥n'] }},'{{ $json['Es Agrupaci√≥n'] }}');","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[992,320],"id":"709a8138-c709-49a1-ba80-7d887ff4daa6","name":"InsertCategory","alwaysOutputData":false,"credentials":{"postgres":{"id":"yuQbEbYhio1ra0Ss","name":"GasoManta-CafeMar"}}},{"parameters":{"documentId":{"__rl":true,"value":"1DqbXWJJqu3Z-1LlYhbbn5BwpR1DqT7WrrluwPeS43aQ","mode":"list","cachedResultName":"CategoriasProductos","cachedResultUrl":"https://docs.google.com/spreadsheets/d/1DqbXWJJqu3Z-1LlYhbbn5BwpR1DqT7WrrluwPeS43aQ/edit?usp=drivesdk"},"sheetName":{"__rl":true,"value":"gid=0","mode":"list","cachedResultName":"Categorias","cachedResultUrl":"https://docs.google.com/spreadsheets/d/1DqbXWJJqu3Z-1LlYhbbn5BwpR1DqT7WrrluwPeS43aQ/edit#gid=0"},"options":{}},"type":"n8n-nodes-base.googleSheets","typeVersion":4.7,"position":[1168,320],"id":"13fed3a9-f565-4eb6-95aa-4bc597cead8e","name":"Categorias2","credentials":{"googleSheetsOAuth2Api":{"id":"hXtG2Lkk5qYTHIdj","name":"TestSidesoft"}}},{"parameters":{"jsCode":"// Entrada: items (filas de la hoja \"categorias\")\n// Salida: mismas filas, con strings limpiados (sin \\r/\\n y trim)\n\nconst out = [];\n\nfor (let i = 0; i < items.length; i++) {\n  const row = { ...(items[i].json || {}) };\n\n  for (const col of Object.keys(row)) {\n    if (col === 'row_number' || col === '_row') continue;\n\n    const val = row[col];\n\n    // Solo limpiar strings; no tocar n√∫meros/fechas/booleanos, etc.\n    if (typeof val === 'string') {\n      // 1) quitar saltos de l√≠nea en cualquier parte\n      // 2) trim al inicio y al final\n      row[col] = val.replace(/[\\r\\n]+/g, '').trim();\n    }\n  }\n\n  out.push({ json: row });\n}\n\nreturn out;\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1344,320],"id":"a89ec1ba-a7cf-4e83-9135-0a3efec1d0e9","name":"Limpieza General1"},{"parameters":{"operation":"executeQuery","query":"BEGIN;\nUPDATE M_Product_Category_Acct SET    P_Revenue_Acct = (select vc.C_ValidCombination_ID from C_ValidCombination vc Inner Join C_ElementValue ev on  ev.C_ElementValue_id = vc.account_id WHERE ev.value = '{{ $json['Cta. Ingreso del producto'] }}')  , P_Expense_Acct = (select vc.C_ValidCombination_ID from C_ValidCombination vc Inner Join C_ElementValue ev on  ev.C_ElementValue_id = vc.account_id WHERE ev.value = '{{ $json['Cta. Gastos del producto'] }}')   , P_Asset_Acct = (select vc.C_ValidCombination_ID from C_ValidCombination vc Inner Join C_ElementValue ev on  ev.C_ElementValue_id = vc.account_id WHERE ev.value = '{{ $json['Cta. Inventario'] }}')       , P_Cogs_Acct = (select vc.C_ValidCombination_ID from C_ValidCombination vc Inner Join C_ElementValue ev on  ev.C_ElementValue_id = vc.account_id WHERE ev.value = '{{ $json['Cta. Costo del producto'] }}')  WHERE M_Product_Category_ID = (SELECT M_Product_Category_ID FROM   M_Product_Category  WHERE value = '{{ $json.Codigo }}');\n\nUPDATE ad_treenode set parent_id =  CASE WHEN (SELECT M_PRODUCT_CATEGORY_ID from M_PRODUCT_CATEGORY where value = '{{ $json['Categoria Padre'] }}' )  is not null THEN (SELECT M_PRODUCT_CATEGORY_ID from M_PRODUCT_CATEGORY where value = '{{ $json['Categoria Padre'] }}' )  ELSE '0' END WHERE node_id = (SELECT M_PRODUCT_CATEGORY_ID from M_PRODUCT_CATEGORY    WHERE value = '{{ $json.Codigo }}');\nCOMMIT;","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[1520,320],"id":"5410d3dc-0dac-4295-9a9c-b076f17f8756","name":"Update Accounting and Treenode","credentials":{"postgres":{"id":"yuQbEbYhio1ra0Ss","name":"GasoManta-CafeMar"}}},{"parameters":{"formTitle":"Cargar Maestros Productos","formFields":{"values":[{"fieldLabel":"Plantilla","fieldType":"file","multipleFiles":false,"acceptFileTypes":".xlsx","requiredField":true}]},"options":{}},"type":"n8n-nodes-base.formTrigger","typeVersion":2.2,"position":[-96,-784],"id":"55c6e10c-b3b5-46bd-9b22-9be02f318e75","name":"CargarProductos","webhookId":"64fe15ed-472c-4fc4-8333-583feea5f13b"},{"parameters":{"inputDataFieldName":"=Plantilla","name":"ProductosT1","driveId":{"__rl":true,"mode":"list","value":"My Drive"},"folderId":{"__rl":true,"value":"1o_tWnknlK80FTByUULypJ7JqNyUtmyEW","mode":"list","cachedResultName":"PlantillasSI","cachedResultUrl":"https://drive.google.com/drive/folders/1o_tWnknlK80FTByUULypJ7JqNyUtmyEW"},"options":{}},"type":"n8n-nodes-base.googleDrive","typeVersion":3,"position":[80,-784],"id":"403dc3b3-9ce4-4553-af66-a90bb0b99794","name":"Upload file","credentials":{"googleDriveOAuth2Api":{"id":"2D5m9UCVL0y0GKgC","name":"Google Drive account"}}},{"parameters":{"jsCode":"// === Par√°metros ajustables ===\n// Permite letras (incluye tildes), n√∫meros, espacio, guion, guion bajo,\n// punto, coma, dos puntos, punto y coma, arroba, #, slash y par√©ntesis.\nconst regexPermitido = /^[A-Za-z0-9√Å√â√ç√ì√ö√ú√ë√°√©√≠√≥√∫√º√± _\\-\\.,:;@#\\/()]*$/;\n\n// Reglas de longitud espec√≠ficas\nconst maxLenCodigo = 40;\nconst maxLenNombre = 60;\n\n// Normalizaci√≥n para chequeo de duplicados:\n// - true: compara sin tildes y en may√∫sculas (recomendado)\n// - false: compara exactamente como viene en la hoja\nconst normalizarDuplicados = true;\n// ==============================\n\n// --- Helpers ---\nconst normalizeForDup = (s) => {\n  if (!normalizarDuplicados) return s;\n  return s\n    .toString()\n    .trim()\n    .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '') // sin tildes\n    .toUpperCase()\n    .replace(/\\s+/g, ' '); // colapsa espacios internos\n};\n\nconst erroresGlobales = [];\n\n// Mapas para duplicados: key normalizada -> { rows: number[], muestra: string }\nconst dupCodigo = new Map();\nconst dupNombre = new Map();\n\nfor (let i = 0; i < items.length; i++) {\n  const row = items[i].json || {};\n  const rowNumber = row.row_number ?? (i + 2); // asume encabezados en fila 1\n\n  // 1) Reglas de longitud SOLO para Codigo / Nombre (case-sensitive seg√∫n tu hoja)\n  const codigo = (row.Codigo ?? '').toString().trim();\n  const nombre = (row.Nombre ?? '').toString().trim();\n\n  if (codigo.length > maxLenCodigo) {\n    erroresGlobales.push(`Columna \"Codigo\" en fila ${rowNumber} (${codigo.length} > ${maxLenCodigo})`);\n  }\n  if (nombre.length > maxLenNombre) {\n    erroresGlobales.push(`Columna \"Nombre\" en fila ${rowNumber} (${nombre.length} > ${maxLenNombre})`);\n  }\n\n  // 1.b) Acumular para duplicados (solo si trae alg√∫n valor)\n  if (codigo) {\n    const k = normalizeForDup(codigo);\n    if (!dupCodigo.has(k)) dupCodigo.set(k, { rows: [], muestra: codigo });\n    dupCodigo.get(k).rows.push(rowNumber);\n  }\n  if (nombre) {\n    const k = normalizeForDup(nombre);\n    if (!dupNombre.has(k)) dupNombre.set(k, { rows: [], muestra: nombre });\n    dupNombre.get(k).rows.push(rowNumber);\n  }\n\n  // 2) Validaci√≥n de saltos de l√≠nea y caracteres permitidos en TODAS las columnas\n  for (const col of Object.keys(row)) {\n    // omitir metacampos comunes\n    if (col === 'row_number' || col === '_row') continue;\n\n    const raw = row[col];\n    if (raw === null || raw === undefined) continue;\n\n    const str = raw.toString();\n\n    // Saltos de l√≠nea\n    if (/\\r|\\n/.test(str)) {\n      erroresGlobales.push(`Columna \"${col}\" en fila ${rowNumber} contiene salto(s) de l√≠nea`);\n    }\n\n    // Caracteres no permitidos (se valida sobre el valor completo; trim NO para no ocultar espacios internos)\n    if (!regexPermitido.test(str)) {\n      const muestra = str.length > 40 ? str.slice(0, 40) + '‚Ä¶' : str;\n      erroresGlobales.push(`Columna \"${col}\" en fila ${rowNumber} contiene caracteres no permitidos (muestra: *${muestra}*)`);\n    }\n  }\n}\n\n// 3) Reporte de duplicados\nfor (const [_, info] of dupCodigo.entries()) {\n  if (info.rows.length > 1) {\n    erroresGlobales.push(\n      `Duplicado en columna \"Codigo\": valor \"${info.muestra}\" en filas ${info.rows.join(', ')}`\n    );\n  }\n}\nfor (const [_, info] of dupNombre.entries()) {\n  if (info.rows.length > 1) {\n    erroresGlobales.push(\n      `Duplicado en columna \"Nombre\": valor \"${info.muestra}\" en filas ${info.rows.join(', ')}`\n    );\n  }\n}\n\n// Salida √∫nica\nif (erroresGlobales.length === 0) {\n  return [{ json: { mensaje: 'CATEGORIAS - ‚úÖ Todo Correcto' } }];\n} else {\n  return [{\n    json: {\n      mensaje: `CATEGORIAS - üö´ Errores encontrados:\\n- ${erroresGlobales.join('\\n- ')}`,\n      totalErrores: erroresGlobales.length\n    }\n  }];\n}\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[560,-352],"id":"33e993ad-aa4a-439e-a42e-1eec13731988","name":"Code8","alwaysOutputData":false,"executeOnce":false},{"parameters":{"assignments":{"assignments":[{"id":"8f9461bb-6548-4026-bdbb-65f979254e74","name":"adClient","value":"","type":"string"},{"id":"5c4561c5-da70-456e-a76f-28f2997ea089","name":"adOrg","value":"","type":"string"},{"id":"2c3b801a-15e7-486a-9a6d-dc4985171e77","name":"cell_number","value":"\"0987525109\"","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[1632,-336],"id":"68cef58b-3f6e-418d-9000-2c99e10f91f9","name":"Edit Fields1"},{"parameters":{"method":"POST","url":"https://agileapichat.sidesoftcorp.com/api/messages/send","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Authorization","value":"Bearer pmo"},{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"bodyParameters":{"parameters":[{"name":"number","value":"={{ $('Edit Fields1').item.json.cell_number }}"},{"name":"body","value":"={{ $('Unificar Errores Categorias').item.json.mensaje }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1840,-336],"id":"7d8c9df8-4d26-4df4-92da-1dbf71fff6eb","name":"Confirmacion3","executeOnce":false},{"parameters":{"documentId":{"__rl":true,"value":"1DqbXWJJqu3Z-1LlYhbbn5BwpR1DqT7WrrluwPeS43aQ","mode":"list","cachedResultName":"CategoriasProductos","cachedResultUrl":"https://docs.google.com/spreadsheets/d/1DqbXWJJqu3Z-1LlYhbbn5BwpR1DqT7WrrluwPeS43aQ/edit?usp=drivesdk"},"sheetName":{"__rl":true,"value":"gid=0","mode":"list","cachedResultName":"Categorias","cachedResultUrl":"https://docs.google.com/spreadsheets/d/1DqbXWJJqu3Z-1LlYhbbn5BwpR1DqT7WrrluwPeS43aQ/edit#gid=0"},"options":{}},"type":"n8n-nodes-base.googleSheets","typeVersion":4.7,"position":[240,-352],"id":"3331222a-3ca0-4f0b-aa03-3dfff64dc93f","name":"Categorias3","credentials":{"googleSheetsOAuth2Api":{"id":"hXtG2Lkk5qYTHIdj","name":"TestSidesoft"}}},{"parameters":{"jsCode":"// --- Config ---\nconst COLS = [\n  'Cta. Ingreso del producto',\n  'Cta. Gastos del producto',\n  'Cta. Inventario',\n  'Cta. Costo del producto',\n];\n\n// ¬øDeseas considerar vac√≠o como error?\nconst TREAT_EMPTY_AS_ERROR = false;\n\n// ¬øComparaci√≥n sin may/min√∫sculas?\nconst UPPERCASE_MATCH = false;\n\n// --- Helpers de normalizaci√≥n (todo a string y limpio) ---\nconst toStr = (v) => {\n  if (v === null || v === undefined) return '';\n  if (typeof v === 'string') return v;\n  if (typeof v === 'number' || typeof v === 'boolean') return String(v);\n  try { return JSON.stringify(v); } catch { return String(v); }\n};\n\nconst clean = (s) => {\n  let out = toStr(s);\n  out = out.replace(/\\u00A0/g, ' ');                 // NBSP -> espacio normal\n  out = out.replace(/[\\u200B-\\u200D\\uFEFF]/g, '');   // zero-width + BOM\n  out = out.replace(/[\\r\\n\\t]+/g, ' ');              // quita saltos/tabs\n  if (out.normalize) out = out.normalize('NFKC');    // normaliza unicode\n  out = out.trim().replace(/\\s+/g, ' ');             // colapsa espacios\n  if (UPPERCASE_MATCH) out = out.toUpperCase();\n  return out;\n};\n\n// 1) HOJA: solo 4 columnas (strings limpios) + _row\nconst hoja = ($items('Categorias3') || []).map((it, i) => {\n  const row = it.json || {};\n  const out = { _row: row.row_number ?? (i + 2) };   // asume encabezado en fila 1\n  for (const c of COLS) out[c] = clean(row[c]);\n  return out;\n});\n\n// 2) POSTGRES: array de strings (columna value), limpios + SET para b√∫squeda O(1)\nconst postgres = ($items('Catalogo de Cuentas OB1') || [])\n  .map(it => it?.json?.value ?? it?.json?.VALUE ?? it?.json?.Value)\n  .map(clean)\n  .filter(v => v !== '');\nconst postgresSet = new Set(postgres);\n\n// 3) Comparar cada fila/columna contra postgresSet\nconst faltantes = [];\nconst hojaVal = hoja.map(r => {\n  const missingCols = [];\n  for (const col of COLS) {\n    const val = r[col]; // ya limpio\n    if (val === '' && !TREAT_EMPTY_AS_ERROR) continue;\n    if (!postgresSet.has(val)) {\n      missingCols.push({ columna: col, valor: val });\n      faltantes.push({ fila: r._row, columna: col, valor: val });\n    }\n  }\n  return { ...r, esValido: missingCols.length === 0, faltantes: missingCols };\n});\n\n// 4) Mensaje global\nconst mensaje = faltantes.length === 0\n  ? 'CATEGORIAS - ‚úÖ Todo Correcto'\n  : 'CATEGORIAS - üö´ Errores encontrados:\\n- ' + faltantes\n      .map(e => `Fila ${e.fila} - Columna \"${e.columna}\" valor *${e.valor}* no existe en cat√°logo`)\n      .join('\\n- ');\n\nreturn [{ json: { mensaje } }];\n\n// 5) Salida √∫nica\n/**\n return [{\n  json: {\n    hoja: hojaVal,      // filas con validaci√≥n por fila\n    postgres,           // lista de cuentas v√°lidas\n    faltantes,          // plano: fila/columna/valor no encontrados\n    totalErrores: faltantes.length,\n    mensaje\n  }\n \n}];\n*/\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[656,-176],"id":"f4c5ddac-c6d9-420f-bd1c-b87ee1b3290e","name":"Code9"},{"parameters":{"operation":"executeQuery","query":"select ev.value \nfrom C_ValidCombination vc \nInner Join C_ElementValue ev on  ev.C_ElementValue_id = vc.account_id ","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[448,-176],"id":"a318f74d-a444-422c-a147-4c6781abbb7d","name":"Catalogo de Cuentas OB1","executeOnce":true,"credentials":{"postgres":{"id":"yuQbEbYhio1ra0Ss","name":"GasoManta-CafeMar"}}},{"parameters":{},"type":"n8n-nodes-base.merge","typeVersion":3.2,"position":[1232,-336],"id":"032cb738-1855-4d6b-962a-bd10fc7dc417","name":"Merge2"},{"parameters":{"jsCode":"// Lee todo lo que llega del Merge y decide EXITO / ERROR\nfunction pickMsgs(items) {\n  return items.map(i => String(i.json?.mensaje ?? '').trim()).filter(Boolean);\n}\nfunction hasErr(s) { return /error/i.test(s); }\nfunction bullets(msg) {\n  const m = String(msg).match(/errores?\\s+encontrados:\\s*([\\s\\S]*)/i);\n  const body = (m ? m[1] : msg).replace(/\\r/g, '');\n  const set = new Set(body.split('\\n').map(x => x.trim()).filter(Boolean));\n  return Array.from(set).map(x => x.startsWith('-') ? x : `- ${x}`);\n}\n\nconst msgs = pickMsgs($items('Merge2'));\nconst errs = msgs.filter(hasErr);\n\nlet resultado, mensaje;\nif (errs.length === 0) {\n  resultado = 'EXITO';\n  mensaje = 'CATEGORIAS - ‚úÖ Todo Correcto';\n} else {\n  const all = errs.flatMap(bullets);\n  resultado = 'ERROR';\n  mensaje = `CATEGORIAS - üö´ Errores encontrados:\\n${all.join('\\n')}`;\n}\n\nreturn [{ json: { resultado, mensaje, totalMensajes: msgs.length, totalConError: errs.length } }];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1440,-336],"id":"5a183cbe-9508-4874-baf6-7cfd66e3177e","name":"Unificar Errores Categorias"},{"parameters":{"jsCode":"// Lee todo lo que llega del Merge y decide EXITO / ERROR\nfunction pickMsgs(items) {\n  return items.map(i => String(i.json?.mensaje ?? '').trim()).filter(Boolean);\n}\nfunction hasErr(s) { return /error/i.test(s); }\nfunction bullets(msg) {\n  const m = String(msg).match(/errores?\\s+encontrados:\\s*([\\s\\S]*)/i);\n  const body = (m ? m[1] : msg).replace(/\\r/g, '');\n  const set = new Set(body.split('\\n').map(x => x.trim()).filter(Boolean));\n  return Array.from(set).map(x => x.startsWith('-') ? x : `- ${x}`);\n}\n\nconst msgs = pickMsgs($items('Merge1'));\nconst errs = msgs.filter(hasErr);\n\nlet resultado, mensaje;\nif (errs.length === 0) {\n  resultado = 'EXITO';\n  mensaje = 'PRODUCTOS - ‚úÖ Todo Correcto';\n} else {\n  const all = errs.flatMap(bullets);\n  resultado = 'ERROR';\n  mensaje = `PRODUCTOS - üö´ Errores encontrados:\\n${all.join('\\n')}`;\n}\n\nreturn [{ json: { resultado, mensaje, totalMensajes: msgs.length, totalConError: errs.length } }];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[4624,-256],"id":"404cabd5-06e5-42a6-8683-37d78196d403","name":"Unificar Errores Productos"},{"parameters":{"operation":"executeQuery","query":"select value,name from m_product_category","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[864,-176],"id":"72c48be4-56b9-4eed-984a-6a4288ceb8cb","name":"Catalogo de Categorias OB","executeOnce":true,"credentials":{"postgres":{"id":"yuQbEbYhio1ra0Ss","name":"GasoManta-CafeMar"}}},{"parameters":{"jsCode":"// === Configuraci√≥n ===\nconst NORMALIZAR = true;   // true: sin tildes, MAY√öSCULAS y espacios colapsados\nconst TRIM_EMPTY = true;   // true: ignora vac√≠os\n\n// Normalizadores\nconst cleanDisplay = (s) => {\n  let out = (s ?? '').toString();\n  out = out.replace(/\\u00A0/g, ' ');\n  out = out.replace(/[\\u200B-\\u200D\\uFEFF]/g, '');\n  out = out.replace(/[\\r\\n\\t]+/g, ' ');\n  if (out.normalize) out = out.normalize('NFKC');\n  return out.trim().replace(/\\s+/g, ' ');\n};\nconst norm = (s) => {\n  let out = cleanDisplay(s);\n  if (TRIM_EMPTY && out === '') return '';\n  if (!NORMALIZAR) return out;\n  return out\n    .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '') // sin tildes\n    .toUpperCase();\n};\n\n// === 1) Datasheet (Google Sheets: nodo 'Categorias3') ===\n// Debe traer columnas 'Codigo' y 'Nombre'\nconst sheetRows = ($items('Categorias3') || []).map((it, i) => {\n  const r = it.json || {};\n  return {\n    rowNumber: r.row_number ?? (i + 2), // encabezado en fila 1\n    CodigoRaw: cleanDisplay(r.Codigo),\n    CodigoNorm: norm(r.Codigo),\n    NombreRaw: cleanDisplay(r.Nombre),\n    NombreNorm: norm(r.Nombre),\n  };\n});\n\n// === 2) Cat√°logo existente en OB (Postgres: nodo 'Catalogo de Categorias OB') ===\n// Query: select value, name from m_product_category\nconst obRows = ($items('Catalogo de Categorias OB') || []).map(it => it.json || {});\nconst obCodigos = new Set(obRows.map(r => norm(r.value)).filter(v => v !== ''));\nconst obNombres = new Set(obRows.map(r => norm(r.name)).filter(v => v !== ''));\n\n// === 3) Acumular coincidencias (sheet que ya existen en OB) ===\n// Guardamos por clave normalizada para agrupar filas y mostrar un solo mensaje por valor\nconst dupCodigo = new Map(); // key -> { muestra, rows[] }\nconst dupNombre = new Map();\n\nfor (const r of sheetRows) {\n  // C√≥digo ya existente en OB\n  if (r.CodigoNorm) {\n    if (obCodigos.has(r.CodigoNorm)) {\n      const e = dupCodigo.get(r.CodigoNorm) || { muestra: r.CodigoRaw || '(vac√≠o)', rows: [] };\n      e.rows.push(r.rowNumber);\n      dupCodigo.set(r.CodigoNorm, e);\n    }\n  }\n\n  // Nombre ya existente en OB\n  if (r.NombreNorm) {\n    if (obNombres.has(r.NombreNorm)) {\n      const e = dupNombre.get(r.NombreNorm) || { muestra: r.NombreRaw || '(vac√≠o)', rows: [] };\n      e.rows.push(r.rowNumber);\n      dupNombre.set(r.NombreNorm, e);\n    }\n  }\n}\n\n// === 4) Construir mensajes en el formato solicitado ===\n// \"Duplicado en columna \"Nombre\": valor \"EXTRA\" en filas 2, 3\"\nconst errores = [];\n\n// Ordenar por valor para salida estable\nconst sortByMuestra = (a, b) => a.muestra.localeCompare(b.muestra, 'es');\n\n[...dupCodigo.values()].sort(sortByMuestra).forEach(e => {\n  e.rows.sort((a, b) => a - b);\n  errores.push(`Duplicado en columna \"Codigo\": valor \"${e.muestra}\" en filas ${e.rows.join(', ')}`);\n});\n[...dupNombre.values()].sort(sortByMuestra).forEach(e => {\n  e.rows.sort((a, b) => a - b);\n  errores.push(`Duplicado en columna \"Nombre\": valor \"${e.muestra}\" en filas ${e.rows.join(', ')}`);\n});\n\n// === 5) Salida ===\nconst mensaje = errores.length === 0\n  ? 'CATEGORIAS (existentes en OB) - ‚úÖ No se encontraron C√≥digos/Nombre presentes en OB'\n  : 'CATEGORIAS (existentes en OB) - üö´ Error Coincidencias encontradas:\\n- ' + errores.join('\\n- ');\n\nreturn [{\n  json: {\n    mensaje,\n    totalErrores: errores.length\n  }\n}];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1072,-176],"id":"0ca93978-0a51-4a69-a46c-1c72ebee4120","name":"Categorias Existentes en OB"},{"parameters":{"operation":"executeQuery","query":"select value, name from m_product","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[4032,-32],"id":"879a36fd-2043-4061-bdd4-3b7c2edc46da","name":"Catalogo Productos OB","executeOnce":true,"credentials":{"postgres":{"id":"yuQbEbYhio1ra0Ss","name":"GasoManta-CafeMar"}}},{"parameters":{"jsCode":"// === Configuraci√≥n ===\nconst NORMALIZAR = true;   // true: sin tildes, MAY√öSCULAS y espacios colapsados\nconst TRIM_EMPTY = true;   // true: ignora vac√≠os\n\n// Normalizadores\nconst cleanDisplay = (s) => {\n  let out = (s ?? '').toString();\n  out = out.replace(/\\u00A0/g, ' ');\n  out = out.replace(/[\\u200B-\\u200D\\uFEFF]/g, '');\n  out = out.replace(/[\\r\\n\\t]+/g, ' ');\n  if (out.normalize) out = out.normalize('NFKC');\n  return out.trim().replace(/\\s+/g, ' ');\n};\nconst norm = (s) => {\n  let out = cleanDisplay(s);\n  if (TRIM_EMPTY && out === '') return '';\n  if (!NORMALIZAR) return out;\n  return out\n    .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '') // sin tildes\n    .toUpperCase();\n};\n\n// === 1) Datasheet (Google Sheets: nodo 'Categorias3') ===\n// Debe traer columnas 'Codigo' y 'Nombre'\nconst sheetRows = ($items('Productos') || []).map((it, i) => {\n  const r = it.json || {};\n  return {\n    rowNumber: r.row_number ?? (i + 2), // encabezado en fila 1\n    CodigoRaw: cleanDisplay(r.Codigo),\n    CodigoNorm: norm(r.Codigo),\n    NombreRaw: cleanDisplay(r.Nombre),\n    NombreNorm: norm(r.Nombre),\n  };\n});\n\n// === 2) Cat√°logo existente en OB (Postgres: nodo 'Catalogo de Categorias OB') ===\n// Query: select value, name from m_product_category\nconst obRows = ($items('Catalogo Productos OB') || []).map(it => it.json || {});\nconst obCodigos = new Set(obRows.map(r => norm(r.value)).filter(v => v !== ''));\nconst obNombres = new Set(obRows.map(r => norm(r.name)).filter(v => v !== ''));\n\n// === 3) Acumular coincidencias (sheet que ya existen en OB) ===\n// Guardamos por clave normalizada para agrupar filas y mostrar un solo mensaje por valor\nconst dupCodigo = new Map(); // key -> { muestra, rows[] }\nconst dupNombre = new Map();\n\nfor (const r of sheetRows) {\n  // C√≥digo ya existente en OB\n  if (r.CodigoNorm) {\n    if (obCodigos.has(r.CodigoNorm)) {\n      const e = dupCodigo.get(r.CodigoNorm) || { muestra: r.CodigoRaw || '(vac√≠o)', rows: [] };\n      e.rows.push(r.rowNumber);\n      dupCodigo.set(r.CodigoNorm, e);\n    }\n  }\n\n  // Nombre ya existente en OB\n  if (r.NombreNorm) {\n    if (obNombres.has(r.NombreNorm)) {\n      const e = dupNombre.get(r.NombreNorm) || { muestra: r.NombreRaw || '(vac√≠o)', rows: [] };\n      e.rows.push(r.rowNumber);\n      dupNombre.set(r.NombreNorm, e);\n    }\n  }\n}\n\n// === 4) Construir mensajes en el formato solicitado ===\n// \"Duplicado en columna \"Nombre\": valor \"EXTRA\" en filas 2, 3\"\nconst errores = [];\n\n// Ordenar por valor para salida estable\nconst sortByMuestra = (a, b) => a.muestra.localeCompare(b.muestra, 'es');\n\n[...dupCodigo.values()].sort(sortByMuestra).forEach(e => {\n  e.rows.sort((a, b) => a - b);\n  errores.push(`Duplicado en columna \"Codigo\": valor \"${e.muestra}\" en filas ${e.rows.join(', ')}`);\n});\n[...dupNombre.values()].sort(sortByMuestra).forEach(e => {\n  e.rows.sort((a, b) => a - b);\n  errores.push(`Duplicado en columna \"Nombre\": valor \"${e.muestra}\" en filas ${e.rows.join(', ')}`);\n});\n\n// === 5) Salida ===\nconst mensaje = errores.length === 0\n  ? 'PRODUCTOS (existentes en OB) - ‚úÖ No se encontraron C√≥digos/Nombre presentes en OB'\n  : 'PRODUCTOS (existentes en OB) - üö´ Error Coincidencias encontradas:\\n- ' + errores.join('\\n- ');\n\nreturn [{\n  json: {\n    mensaje,\n    totalErrores: errores.length\n  }\n}];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[4240,-32],"id":"f387568d-fe79-4257-a78e-9826b1cfe738","name":"Productos Existentes en OB"}],"connections":{"When clicking ‚ÄòExecute workflow‚Äô":{"main":[[{"node":"Categorias3","type":"main","index":0}]]},"Productos":{"main":[[{"node":"Code1","type":"main","index":0},{"node":"Cuentas","type":"main","index":0}]]},"Code1":{"main":[[{"node":"Merge1","type":"main","index":0}]]},"ProductCategory":{"main":[[{"node":"Code3","type":"main","index":0}]]},"TaxCategory":{"main":[[{"node":"Code4","type":"main","index":0}]]},"Unidad":{"main":[[{"node":"Code5","type":"main","index":0}]]},"Retencion":{"main":[[{"node":"Code6","type":"main","index":0}]]},"Cuentas":{"main":[[{"node":"ProductCategory","type":"main","index":0}]]},"Code3":{"main":[[{"node":"TaxCategory","type":"main","index":0},{"node":"Merge1","type":"main","index":1}]]},"Code4":{"main":[[{"node":"Unidad","type":"main","index":0},{"node":"Merge1","type":"main","index":2}]]},"Code5":{"main":[[{"node":"Retencion","type":"main","index":0},{"node":"Merge1","type":"main","index":3}]]},"Code6":{"main":[[{"node":"Merge1","type":"main","index":4},{"node":"Catalogo Productos OB","type":"main","index":0}]]},"Merge1":{"main":[[{"node":"Unificar Errores Productos","type":"main","index":0}]]},"Categorias1":{"main":[[{"node":"Limpieza General","type":"main","index":0}]]},"Limpieza General":{"main":[[{"node":"InsertCategory","type":"main","index":0}]]},"ADClient":{"main":[[{"node":"ADOrg","type":"main","index":0}]]},"ADOrg":{"main":[[{"node":"Categorias1","type":"main","index":0}]]},"InsertCategory":{"main":[[{"node":"Categorias2","type":"main","index":0}]]},"Categorias2":{"main":[[{"node":"Limpieza General1","type":"main","index":0}]]},"Limpieza General1":{"main":[[{"node":"Update Accounting and Treenode","type":"main","index":0}]]},"CargarProductos":{"main":[[{"node":"Upload file","type":"main","index":0}]]},"Upload file":{"main":[[]]},"Code8":{"main":[[{"node":"Merge2","type":"main","index":0}]]},"Edit Fields1":{"main":[[{"node":"Confirmacion3","type":"main","index":0}]]},"Categorias3":{"main":[[{"node":"Code8","type":"main","index":0},{"node":"Catalogo de Cuentas OB1","type":"main","index":0}]]},"Code9":{"main":[[{"node":"Catalogo de Categorias OB","type":"main","index":0}]]},"Catalogo de Cuentas OB1":{"main":[[{"node":"Code9","type":"main","index":0}]]},"Merge2":{"main":[[{"node":"Unificar Errores Categorias","type":"main","index":0}]]},"Unificar Errores Categorias":{"main":[[{"node":"Edit Fields1","type":"main","index":0}]]},"Unificar Errores Productos":{"main":[[{"node":"Confirmacion","type":"main","index":0}]]},"Catalogo de Categorias OB":{"main":[[{"node":"Categorias Existentes en OB","type":"main","index":0}]]},"Categorias Existentes en OB":{"main":[[{"node":"Merge2","type":"main","index":1}]]},"Catalogo Productos OB":{"main":[[{"node":"Productos Existentes en OB","type":"main","index":0}]]},"Productos Existentes en OB":{"main":[[{"node":"Merge1","type":"main","index":5}]]},"Confirmacion3":{"main":[[{"node":"Productos","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"e0293c2c-6dc2-415f-8d82-582b62627f75","triggerCount":0,"shared":[{"createdAt":"2025-09-24T16:06:57.691Z","updatedAt":"2025-09-24T16:06:57.691Z","role":"workflow:owner","workflowId":"cRJ8nUwN9IN6jhWs","projectId":"Bev2pwmvUzes1BM7"}],"tags":[]}