{"createdAt":"2025-10-08T14:17:22.011Z","updatedAt":"2025-10-08T21:17:53.000Z","id":"AQYnGfAHDaFwgYIg","name":"Pruebas_Maestros","active":false,"isArchived":false,"nodes":[{"parameters":{"method":"POST","url":"=https://www.googleapis.com/drive/v3/files/{{ $json.id }}/copy","authentication":"predefinedCredentialType","nodeCredentialType":"googleOAuth2Api","sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"convert\": true,\n  \"mimeType\": \"application/vnd.google-apps.spreadsheet\",\n  \"parents\": [\"{{ $('Variables1').item.json.convertedFilesDirectory }}\"]\n}","options":{}},"id":"4fe1e46c-ed46-4142-9cf2-e2b37678872d","name":"Convert File","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-272,-304],"credentials":{"googleOAuth2Api":{"id":"N3sd298xjJQFZGOz","name":"Google account"}},"onError":"continueErrorOutput"},{"parameters":{"documentId":{"__rl":true,"value":"={{ $json.id }}","mode":"id"},"sheetName":{"__rl":true,"value":"Categorias","mode":"name"},"options":{}},"type":"n8n-nodes-base.googleSheets","typeVersion":4.7,"position":[448,-176],"id":"6e83b1d6-9d2f-4915-b7b1-307106f5a113","name":"Categorias","credentials":{"googleSheetsOAuth2Api":{"id":"hXtG2Lkk5qYTHIdj","name":"TestSidesoft"}}},{"parameters":{"jsCode":"// Clasifica: 'texto' | 'imagen' | 'audio' | 'video' | 'documento'\n// Mantiene SIEMPRE el mismo formato de retorno:\n// { kind, text, media, raw, sender, timestamp }\n\nfunction unwrap(m) {\n  if (!m) return m;\n  if (m.ephemeralMessage?.message) return unwrap(m.ephemeralMessage.message);\n  if (m.viewOnceMessage?.message) return unwrap(m.viewOnceMessage.message);\n  if (m.viewOnceMessageV2?.message) return unwrap(m.viewOnceMessageV2.message);\n  return m;\n}\n\nfunction toNum(x) {\n  const n = Number(x);\n  return Number.isFinite(n) ? n : null;\n}\n\nfunction isImageMime(mt) {\n  return typeof mt === \"string\" && mt.toLowerCase().startsWith(\"image/\");\n}\n\nfunction isImageFilename(name) {\n  if (!name) return false;\n  return /\\.(jpe?g|png|webp|gif|bmp|tif?f)$/i.test(String(name));\n}\n\nfunction detectar(body) {\n  const msg = unwrap(body?.message || {});\n  if (!msg) return { kind: \"desconocido\", text: \"\", media: null, raw: body };\n\n  // === AUDIO ===\n  if (msg.audioMessage) {\n    const a = msg.audioMessage;\n    const url = a.url || \"\";\n    return {\n      kind: \"audio\",\n      text: \"\",\n      media: {\n        url,\n        mimetype: a.mimetype || null,\n        encrypted: url.includes(\".enc\"),\n        mediaKey: a.mediaKey || null,\n        directPath: a.directPath || null,\n        seconds: typeof a.seconds === \"number\" ? a.seconds : toNum(a.seconds),\n        ptt: Boolean(a.ptt)\n      },\n      raw: body\n    };\n  }\n\n  // === VIDEO ===\n  if (msg.videoMessage) {\n    const v = msg.videoMessage;\n    const url = v.url || \"\";\n    return {\n      kind: \"video\",\n      text: v.caption || \"\",\n      media: {\n        url,\n        mimetype: v.mimetype || null,\n        encrypted: url.includes(\".enc\"),\n        mediaKey: v.mediaKey || null,\n        directPath: v.directPath || null,\n        seconds: typeof v.seconds === \"number\" ? v.seconds : toNum(v.seconds),\n        gifPlayback: Boolean(v.gifPlayback)\n      },\n      raw: body\n    };\n  }\n\n  // === STICKER (tratar como IMAGEN) ===\n  if (msg.stickerMessage) {\n    const s = msg.stickerMessage;\n    const url = s.url || \"\";\n    return {\n      kind: \"imagen\",\n      text: \"\",\n      media: {\n        url,\n        mimetype: s.mimetype || \"image/webp\",\n        encrypted: url.includes(\".enc\"),\n        mediaKey: s.mediaKey || null,\n        directPath: s.directPath || null,\n        isSticker: true,\n        isAnimated: Boolean(s.isAnimated)\n      },\n      raw: body\n    };\n  }\n\n  // === IMAGEN ===\n  if (msg.imageMessage) {\n    const i = msg.imageMessage;\n    const url = i.url || \"\";\n    return {\n      kind: \"imagen\",\n      text: i.caption || \"\",\n      media: {\n        url,\n        mimetype: i.mimetype || null,\n        encrypted: url.includes(\".enc\"),\n        mediaKey: i.mediaKey || null,\n        directPath: i.directPath || null\n      },\n      raw: body\n    };\n  }\n\n  // === DOCUMENTO (si es imagen -> clasificar como IMAGEN; si no, DOCUMENTO) ===\n  if (msg.documentMessage) {\n    const d = msg.documentMessage;\n    const url = d.url || \"\";\n    const fileName = d.fileName || d.title || null;\n    const mime = d.mimetype || null;\n\n    if (isImageMime(mime) || isImageFilename(fileName)) {\n      // document enviado como imagen -> tratar como imagen\n      return {\n        kind: \"imagen\",\n        text: \"\",\n        media: {\n          url,\n          mimetype: mime || \"image/jpeg\",\n          encrypted: url.includes(\".enc\"),\n          mediaKey: d.mediaKey || null,\n          directPath: d.directPath || null,\n          fromDocument: true,\n          fileName,\n          fileLength: toNum(d.fileLength),\n          fileSha256: d.fileSha256 || null,\n          fileEncSha256: d.fileEncSha256 || null,\n          mediaKeyTimestamp: toNum(d.mediaKeyTimestamp)\n        },\n        raw: body\n      };\n    }\n\n    // documento \"normal\"\n    return {\n      kind: \"documento\",\n      text: \"\",\n      media: {\n        url,\n        mimetype: mime,\n        encrypted: url.includes(\".enc\"),\n        mediaKey: d.mediaKey || null,\n        directPath: d.directPath || null,\n        fileName,\n        fileLength: toNum(d.fileLength),\n        pageCount: toNum(d.pageCount),\n        fileSha256: d.fileSha256 || null,\n        fileEncSha256: d.fileEncSha256 || null,\n        mediaKeyTimestamp: toNum(d.mediaKeyTimestamp),\n        // miniatura (si existe)\n        thumbnail: {\n          jpegThumbnail: d.jpegThumbnail || null,\n          thumbnailDirectPath: d.thumbnailDirectPath || null,\n          thumbnailSha256: d.thumbnailSha256 || null,\n          thumbnailEncSha256: d.thumbnailEncSha256 || null,\n          width: toNum(d.thumbnailWidth),\n          height: toNum(d.thumbnailHeight)\n        }\n      },\n      raw: body\n    };\n  }\n\n  // === TEXTO ===\n  if (msg.conversation || msg.extendedTextMessage?.text) {\n    return {\n      kind: \"texto\",\n      text: msg.conversation || msg.extendedTextMessage?.text || \"\",\n      media: null,\n      raw: body\n    };\n  }\n\n  // Desconocido\n  return { kind: \"desconocido\", text: \"\", media: null, raw: body };\n}\n\nreturn items.map(it => {\n  const body = it.json?.body ?? it.json;\n  const out = detectar(body);\n  const ts = body?.messageTimestamp ? new Date(Number(body.messageTimestamp) * 1000).toISOString() : null;\n\n  return {\n    json: {\n      kind: out.kind,      // 'audio' | 'video' | 'imagen' | 'documento' | 'texto' | 'desconocido'\n      text: out.text,\n      media: out.media,\n      raw: out.raw,\n      sender: {\n        name: body?.pushName || \"\",\n        remoteJid: body?.key?.remoteJid || \"\",\n        fromMe: Boolean(body?.key?.fromMe),\n        id: body?.key?.id || null\n      },\n      timestamp: ts\n    }\n  };\n});\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-1248,32],"id":"113f0621-b3d5-49f9-801d-4ef1ac8611de","name":"Code"},{"parameters":{"httpMethod":"POST","path":"mensajes","responseMode":"lastNode","options":{}},"type":"n8n-nodes-base.webhook","typeVersion":2,"position":[-1616,32],"id":"7c53da09-2f5b-4644-8b6f-fb4fb089e285","name":"Webhook2","webhookId":"768b9e6a-6baa-4c5b-8ae9-4e5f596eac72"},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"leftValue":"={{ $json.kind }}","rightValue":"imagen","operator":{"type":"string","operation":"equals"},"id":"00b32689-b52a-4d70-a760-dc0cce84ff15"}],"combinator":"and"},"renameOutput":true,"outputKey":"Imagen"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"b7f336c3-f05a-4002-b7ff-1cf0ba412092","leftValue":"={{ $json.kind }}","rightValue":"audio","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"Audio"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"a3e61211-0ab1-47f7-89d7-4dcd56af7e7b","leftValue":"={{ $json.kind }}","rightValue":"documento","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"Documento"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"d4839b9a-e949-471b-810c-2a1c13237947","leftValue":"={{ $json.kind }}","rightValue":"video","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"Video"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"50408c73-0b2d-4658-9b88-60b7b11ec663","leftValue":"={{ $json.kind }}","rightValue":"texto","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"Texto"}]},"options":{"fallbackOutput":"extra"}},"type":"n8n-nodes-base.switch","typeVersion":3.2,"position":[-1056,-32],"id":"f96d3bf2-ee8f-42d5-9363-acb1b35f1c17","name":"Switch1"},{"parameters":{"method":"POST","url":" https://agileapichat.sidesoftcorp.com/api/api/messages/send","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Authorization","value":"Bearer linea1"},{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"bodyParameters":{"parameters":[{"name":"number","value":"={{ $('Homologar_msg1').item.json.telefono }}"},{"name":"body","value":"={{ $json.userMessage }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-256,352],"id":"b4d8b8df-b445-4203-ad9b-baeaf2fb4532","name":"Response6","disabled":true},{"parameters":{"jsCode":"return items.map(item => {\n  const body = item.json.body;\n  const msg = body.message || {};\n  const telefono = remoteJid.split('@')[0];\n\n  let messageText = \"\";\n\n  // Caso 1: texto plano\n  if (msg.conversation) {\n    messageText = msg.conversation;\n  }\n\n  // Caso 2: texto extendido (con contexto)\n  else if (msg.extendedTextMessage?.text) {\n    messageText = msg.extendedTextMessage.text;\n  }\n\n  // Caso 3: imagen con caption\n  else if (msg.imageMessage?.caption) {\n    messageText = msg.imageMessage.caption;\n  }\n\n  // Caso 4: video con caption\n  else if (msg.videoMessage?.caption) {\n    messageText = msg.videoMessage.caption;\n  }\n\n  // Caso 5: audio/nota de voz (no trae texto, solo informamos)\n  else if (msg.audioMessage) {\n    messageText = \"[Audio recibido]\";\n  }\n\n  // Caso 6: botón presionado\n  else if (msg.buttonsResponseMessage?.selectedButtonId) {\n    messageText = msg.buttonsResponseMessage.selectedButtonId;\n  }\n\n  // Caso 7: lista seleccionada\n  else if (msg.listResponseMessage?.singleSelectReply?.selectedRowId) {\n    messageText = msg.listResponseMessage.singleSelectReply.selectedRowId;\n  }\n\n  // Caso 8: sticker\n  else if (msg.stickerMessage) {\n    messageText = \"[Sticker recibido]\";\n  }\n\n  // Caso 9: documento\n  else if (msg.documentMessage?.fileName) {\n    messageText = `[Documento: ${msg.documentMessage.fileName}]`;\n  }\n\n  // Si no hay nada reconocible\n  else {\n    messageText = \"[Mensaje no reconocido]\";\n  }\n\n  return {\n    json: {\n      ...item.json,\n      userMessage: messageText,   // 🔹 campo unificado para usar en AI Agent\n      telefono\n    }\n  };\n});\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-1424,32],"id":"73b276d0-e344-4284-b5e8-3fdcc1d8c39f","name":"Homologar_msg1"},{"parameters":{},"type":"n8n-nodes-base.merge","typeVersion":3.2,"position":[-480,352],"id":"4bb3471e-b2a6-4fad-8402-17666b8e0b6f","name":"Merge1"},{"parameters":{"method":"POST","url":"https://admchat.duckdns.org/wa-decrypt/decrypt-document","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"bodyParameters":{"parameters":[{"name":"mimetype","value":"={{ $('Code').item.json.raw.message.documentMessage.mimetype }}"},{"name":"mediaKey","value":"={{ $('Code').item.json.raw.message.documentMessage.mediaKey }}"},{"name":"fileEncSha256","value":"={{ $('Code').item.json.raw.message.documentMessage.fileEncSha256 }}"},{"name":"mediaKeyTimestamp","value":"={{ $('Code').item.json.raw.message.documentMessage.mediaKeyTimestamp }}"},{"name":"directPath","value":"={{ $('Code').item.json.raw.message.documentMessage.directPath }}"},{"name":"fileSha256","value":"={{ $('Code').item.json.raw.message.documentMessage.fileSha256 }}"},{"name":"filename","value":"={{ $('Code').item.json.raw.message.documentMessage.fileName }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-128,0],"id":"72b48dd5-8435-4b6d-a232-4d4e85710ea6","name":"HTTP Request4"},{"parameters":{"name":"={{ $('Variables').item.json.fileName }}","driveId":{"__rl":true,"value":"My Drive","mode":"list","cachedResultName":"My Drive","cachedResultUrl":"https://drive.google.com/drive/my-drive"},"folderId":{"__rl":true,"value":"={{ $('Variables').item.json.uploadFilesDirectory }}","mode":"id"},"options":{}},"type":"n8n-nodes-base.googleDrive","typeVersion":3,"position":[32,0],"id":"c1efdf9b-7619-4920-930b-eb1c1176c72d","name":"Upload file","credentials":{"googleDriveOAuth2Api":{"id":"2D5m9UCVL0y0GKgC","name":"Google Drive account"}}},{"parameters":{"method":"POST","url":"=https://www.googleapis.com/drive/v3/files/{{ $json.id }}/copy","authentication":"predefinedCredentialType","nodeCredentialType":"googleOAuth2Api","sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"convert\": true,\n  \"mimeType\": \"application/vnd.google-apps.spreadsheet\",\n  \"parents\": [\"{{ $('Variables').item.json.convertedFilesDirectory }}\"]\n}","options":{}},"id":"a2f7a9b2-a02d-49cc-a339-c6dab330dff8","name":"Convert File1","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[192,0],"credentials":{"googleOAuth2Api":{"id":"N3sd298xjJQFZGOz","name":"Google account"}},"onError":"continueErrorOutput"},{"parameters":{"formTitle":"Cargar Maestros Productos","formFields":{"values":[{"fieldLabel":"Plantilla","fieldType":"file","multipleFiles":false,"acceptFileTypes":".xlsx","requiredField":true},{"fieldLabel":"Telefono Celular","requiredField":true}]},"options":{}},"type":"n8n-nodes-base.formTrigger","typeVersion":2.2,"position":[-1520,-288],"id":"a4c2d384-cc23-47ca-8866-3253a0f1430f","name":"CargarProductos","webhookId":"64fe15ed-472c-4fc4-8333-583feea5f13b"},{"parameters":{"inputDataFieldName":"=data","name":"={{ $('Variables1').item.json.fileName }}","driveId":{"__rl":true,"mode":"list","value":"My Drive"},"folderId":{"__rl":true,"value":"={{ $('Variables1').item.json.uploadFilesDirectory }}","mode":"id"},"options":{}},"type":"n8n-nodes-base.googleDrive","typeVersion":3,"position":[-432,-304],"id":"d15fcd33-1a31-4e96-b3d8-d557265756b6","name":"Upload file1","credentials":{"googleDriveOAuth2Api":{"id":"2D5m9UCVL0y0GKgC","name":"Google Drive account"}}},{"parameters":{"documentId":{"__rl":true,"value":"1DqbXWJJqu3Z-1LlYhbbn5BwpR1DqT7WrrluwPeS43aQ","mode":"list","cachedResultName":"CategoriasProductos","cachedResultUrl":"https://docs.google.com/spreadsheets/d/1DqbXWJJqu3Z-1LlYhbbn5BwpR1DqT7WrrluwPeS43aQ/edit?usp=drivesdk"},"sheetName":{"__rl":true,"value":882738556,"mode":"list","cachedResultName":"Productos","cachedResultUrl":"https://docs.google.com/spreadsheets/d/1DqbXWJJqu3Z-1LlYhbbn5BwpR1DqT7WrrluwPeS43aQ/edit#gid=882738556"},"options":{}},"type":"n8n-nodes-base.googleSheets","typeVersion":4.7,"position":[2736,768],"id":"14dbec22-af86-4ee9-b999-3064a9d25a94","name":"Productos","credentials":{"googleSheetsOAuth2Api":{"id":"hXtG2Lkk5qYTHIdj","name":"TestSidesoft"}}},{"parameters":{"jsCode":"// Valida SOLO 'Codigo' y 'Nombre'\n// Reglas\nconst maxLen = { Codigo: 40, Nombre: 60 };\n// Permitidos: letras (incluye tildes/ñ), números, espacio, guion -, punto, coma,\n// dos puntos, ;, @, #, /, paréntesis. (NO permite \"_\")\nconst allowedClass = \"A-Za-z0-9ÁÉÍÓÚÜÑáéíóúüñ \\\\-\\\\.,:;@#\\\\/()$\";\nconst invalidCharRegex = new RegExp(`[^${allowedClass}]`, \"g\");\nconst newlineRegex = /[\\r\\n\\v\\f\\u0085\\u2028\\u2029]/;\n\n// === Duplicados ===\n// Normalizar comparación de duplicados: sin tildes, en mayúsculas y espacios colapsados\nconst normalizarDuplicados = true;\nconst normalizeForDup = (s) => {\n  if (!normalizarDuplicados) return s.toString().trim();\n  return s\n    .toString()\n    .trim()\n    .normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") // sin tildes\n    .toUpperCase()\n    .replace(/\\s+/g, \" \"); // colapsa espacios internos\n};\n\n// Mapas para duplicados: key normalizada -> { rows: number[], muestra: string }\nconst dupCodigo = new Map();\nconst dupNombre = new Map();\n\nconst errores = [];\n\nfor (let i = 0; i < items.length; i++) {\n  const row = items[i].json || {};\n  const rowNumber = row.row_number ?? (i + 2); // asume encabezado en fila 1\n\n  for (const col of [\"Codigo\", \"Nombre\", \"Descripcion\", \"Descripción FE\"]) {\n    const valRaw = (row[col] ?? \"\").toString();\n    const val = valRaw.trim();\n    const len = val.length;\n\n    // Longitud (solo aplica cuando hay regla definida)\n    if (maxLen[col] !== undefined && len > maxLen[col]) {\n      errores.push(`Columna \"${col}\" en fila ${rowNumber} (${len} > ${maxLen[col]})`);\n    }\n\n    // Saltos de línea (incluye separadores Unicode)\n    if (newlineRegex.test(valRaw)) {\n      errores.push(`Columna \"${col}\" en fila ${rowNumber} contiene salto(s) de línea`);\n    }\n\n    // Caracteres no permitidos (incluye \"_\")\n    const bad = val.match(invalidCharRegex);\n    if (bad) {\n      const unicos = [...new Set(bad)].join(\"\");\n      errores.push(`Columna \"${col}\" en fila ${rowNumber} contiene caracteres no permitidos [${unicos}]`);\n    }\n\n    // Acumular para duplicados en Codigo / Nombre\n    if (col === \"Codigo\" && val) {\n      const k = normalizeForDup(val);\n      if (!dupCodigo.has(k)) dupCodigo.set(k, { rows: [], muestra: val });\n      dupCodigo.get(k).rows.push(rowNumber);\n    }\n    if (col === \"Nombre\" && val) {\n      const k = normalizeForDup(val);\n      if (!dupNombre.has(k)) dupNombre.set(k, { rows: [], muestra: val });\n      dupNombre.get(k).rows.push(rowNumber);\n    }\n  }\n}\n\n// Reporte de duplicados (solo si hay más de una ocurrencia)\nfor (const info of dupCodigo.values()) {\n  if (info.rows.length > 1) {\n    errores.push(`Duplicado en columna \"Codigo\": valor \"${info.muestra}\" en filas ${info.rows.join(\", \")}`);\n  }\n}\nfor (const info of dupNombre.values()) {\n  if (info.rows.length > 1) {\n    errores.push(`Duplicado en columna \"Nombre\": valor \"${info.muestra}\" en filas ${info.rows.join(\", \")}`);\n  }\n}\n\n// Salida única con resumen\nreturn [{\n  json: {\n    mensaje: errores.length\n      ? `PRODUCTOS - 🚫 Errores encontrados:\\n- ${errores.join('\\n- ')}`\n      : 'PRODUCTOS - ✅ Todo Correcto',\n    totalErrores: errores.length\n  }\n}];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2976,768],"id":"2180cf41-3951-421d-870b-0ed5cf93a9eb","name":"Code1","alwaysOutputData":false,"executeOnce":false},{"parameters":{"method":"POST","url":"https://agileapichat.sidesoftcorp.com/api/messages/send","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Authorization","value":"Bearer pmo"},{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"bodyParameters":{"parameters":[{"name":"number","value":"=0987525109"},{"name":"body","value":"={{ $('Unificar Errores Productos').item.json.mensaje }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[5424,848],"id":"445f244e-2aa5-44ca-a0ab-b5f1d6c87a11","name":"Confirmacion","executeOnce":false,"disabled":true},{"parameters":{"operation":"executeQuery","query":"SELECT name FROM M_Product_Category where isactive='Y'","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[3184,1072],"id":"7c0807a3-6f5a-45ac-bb27-981c609fad5c","name":"ProductCategory","executeOnce":true,"credentials":{"postgres":{"id":"yuQbEbYhio1ra0Ss","name":"GasoManta-CafeMar"}}},{"parameters":{"operation":"executeQuery","query":"select name  from c_taxcategory  where isactive='Y'","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[3536,1072],"id":"5cad9c68-4f79-429c-b106-49f2bfe4d2ff","name":"TaxCategory","executeOnce":true,"credentials":{"postgres":{"id":"yuQbEbYhio1ra0Ss","name":"GasoManta-CafeMar"}}},{"parameters":{"operation":"executeQuery","query":"select uomsymbol from c_uom where isactive='Y'","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[3904,1072],"id":"7bafa05c-5cea-4738-8d78-974f117ef4c2","name":"Unidad","executeOnce":true,"credentials":{"postgres":{"id":"yuQbEbYhio1ra0Ss","name":"GasoManta-CafeMar"}}},{"parameters":{"operation":"executeQuery","query":"select w.name \nfrom SSWH_Withholding_Source w \ninner join SSWH_Source ws on ws.SSWH_Withholding_Source_id = w.SSWH_Withholding_Source_ID \ninner join c_tax ct on ct.c_tax_ID = ws.c_tax_ID","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[4272,1072],"id":"5701be2b-2059-4818-82eb-d3b26f0e6c30","name":"Retencion","executeOnce":true,"credentials":{"postgres":{"id":"yuQbEbYhio1ra0Ss","name":"GasoManta-CafeMar"}}},{"parameters":{"operation":"executeQuery","query":"select ev.value \nfrom C_ValidCombination vc \nInner Join C_ElementValue ev on  ev.C_ElementValue_id = vc.account_id ","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[3008,1072],"id":"69f1592b-cb49-4d0f-a1ed-293a6470bfd9","name":"Cuentas","executeOnce":true,"credentials":{"postgres":{"id":"yuQbEbYhio1ra0Ss","name":"GasoManta-CafeMar"}}},{"parameters":{"jsCode":"// --- Config ---\nconst COLS = [\n  'Cta. Ingreso del producto',\n  'Cta. Gastos del producto',\n  'Cta. Inventario',\n  'Cta. Costo del producto',\n];\n\n// ¿Deseas considerar vacío como error?\nconst TREAT_EMPTY_AS_ERROR = false;\n\n// ¿Comparación sin may/minúsculas?\nconst UPPERCASE_MATCH = false;\n\n// --- Helpers de normalización (todo a string y limpio) ---\nconst toStr = (v) => {\n  if (v === null || v === undefined) return '';\n  if (typeof v === 'string') return v;\n  if (typeof v === 'number' || typeof v === 'boolean') return String(v);\n  try { return JSON.stringify(v); } catch { return String(v); }\n};\n\nconst clean = (s) => {\n  let out = toStr(s);\n  out = out.replace(/\\u00A0/g, ' ');                 // NBSP -> espacio normal\n  out = out.replace(/[\\u200B-\\u200D\\uFEFF]/g, '');   // zero-width + BOM\n  out = out.replace(/[\\r\\n\\t]+/g, ' ');              // quita saltos/tabs\n  if (out.normalize) out = out.normalize('NFKC');    // normaliza unicode\n  out = out.trim().replace(/\\s+/g, ' ');             // colapsa espacios\n  if (UPPERCASE_MATCH) out = out.toUpperCase();\n  return out;\n};\n\n// 1) HOJA: solo 4 columnas (strings limpios) + _row\nconst hoja = ($items('Productos') || []).map((it, i) => {\n  const row = it.json || {};\n  const out = { _row: row.row_number ?? (i + 2) };   // asume encabezado en fila 1\n  for (const c of COLS) out[c] = clean(row[c]);\n  return out;\n});\n\n// 2) POSTGRES: array de strings (columna value), limpios + SET para búsqueda O(1)\nconst postgres = ($items('Cuentas') || [])\n  .map(it => it?.json?.value ?? it?.json?.VALUE ?? it?.json?.Value)\n  .map(clean)\n  .filter(v => v !== '');\nconst postgresSet = new Set(postgres);\n\n// 3) Comparar cada fila/columna contra postgresSet\nconst faltantes = [];\nconst hojaVal = hoja.map(r => {\n  const missingCols = [];\n  for (const col of COLS) {\n    const val = r[col]; // ya limpio\n    if (val === '' && !TREAT_EMPTY_AS_ERROR) continue;\n    if (!postgresSet.has(val)) {\n      missingCols.push({ columna: col, valor: val });\n      faltantes.push({ fila: r._row, columna: col, valor: val });\n    }\n  }\n  return { ...r, esValido: missingCols.length === 0, faltantes: missingCols };\n});\n\n// 4) Mensaje global\nconst mensaje = faltantes.length === 0\n  ? 'PRODUCTOS CATEGORIAS - Todo Correcto'\n  : 'PRODUCTOS CATEGORIAS - Errores encontrados:\\n- ' + faltantes\n      .map(e => `Fila ${e.fila} - Columna \"${e.columna}\" valor *${e.valor}* no existe en catálogo`)\n      .join('\\n- ');\n\nreturn [{ json: { mensaje } }];\n\n// 5) Salida única\n/**\n return [{\n  json: {\n    hoja: hojaVal,      // filas con validación por fila\n    postgres,           // lista de cuentas válidas\n    faltantes,          // plano: fila/columna/valor no encontrados\n    totalErrores: faltantes.length,\n    mensaje\n  }\n \n}];\n*/\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[3360,1072],"id":"659f4bad-bda7-4915-8124-bd921675f1af","name":"Code3"},{"parameters":{"jsCode":"// --- Config ---\nconst COLS = [\n  'Impuesto Venta',\n];\n\n// ¿Deseas considerar vacío como error?\nconst TREAT_EMPTY_AS_ERROR = false;\n\n// ¿Comparación sin may/minúsculas?\nconst UPPERCASE_MATCH = false;\n\n// --- Helpers de normalización (todo a string y limpio) ---\nconst toStr = (v) => {\n  if (v === null || v === undefined) return '';\n  if (typeof v === 'string') return v;\n  if (typeof v === 'number' || typeof v === 'boolean') return String(v);\n  try { return JSON.stringify(v); } catch { return String(v); }\n};\n\nconst clean = (s) => {\n  let out = toStr(s);\n  out = out.replace(/\\u00A0/g, ' ');                 // NBSP -> espacio normal\n  out = out.replace(/[\\u200B-\\u200D\\uFEFF]/g, '');   // zero-width + BOM\n  out = out.replace(/[\\r\\n\\t]+/g, ' ');              // quita saltos/tabs\n  if (out.normalize) out = out.normalize('NFKC');    // normaliza unicode\n  out = out.trim().replace(/\\s+/g, ' ');             // colapsa espacios\n  if (UPPERCASE_MATCH) out = out.toUpperCase();\n  return out;\n};\n\n// 1) HOJA: solo 4 columnas (strings limpios) + _row\nconst hoja = ($items('Productos') || []).map((it, i) => {\n  const row = it.json || {};\n  const out = { _row: row.row_number ?? (i + 2) };   // asume encabezado en fila 1\n  for (const c of COLS) out[c] = clean(row[c]);\n  return out;\n});\n\n// 2) POSTGRES: array de strings (columna value), limpios + SET para búsqueda O(1)\nconst postgres = ($items('TaxCategory') || [])\n  .map(it => it?.json?.name ?? it?.json?.name ?? it?.json?.name)\n  .map(clean)\n  .filter(v => v !== '');\nconst postgresSet = new Set(postgres);\n\n// 3) Comparar cada fila/columna contra postgresSet\nconst faltantes = [];\nconst hojaVal = hoja.map(r => {\n  const missingCols = [];\n  for (const col of COLS) {\n    const val = r[col]; // ya limpio\n    if (val === '' && !TREAT_EMPTY_AS_ERROR) continue;\n    if (!postgresSet.has(val)) {\n      missingCols.push({ columna: col, valor: val });\n      faltantes.push({ fila: r._row, columna: col, valor: val });\n    }\n  }\n  return { ...r, esValido: missingCols.length === 0, faltantes: missingCols };\n});\n\n// 4) Mensaje global\nconst mensaje = faltantes.length === 0\n  ? 'PRODUCTOS IMPUESTOS - Todo Correcto'\n  : 'PRODUCTOS IMPUESTOS - Errores encontrados:\\n- ' + faltantes\n      .map(e => `Fila ${e.fila} - Columna \"${e.columna}\" valor *${e.valor}* no existe en catálogo`)\n      .join('\\n- ');\n\nreturn [{ json: { mensaje } }];\n\n// 5) Salida única\n/**\n return [{\n  json: {\n    hoja: hojaVal,      // filas con validación por fila\n    postgres,           // lista de cuentas válidas\n    faltantes,          // plano: fila/columna/valor no encontrados\n    totalErrores: faltantes.length,\n    mensaje\n  }\n \n}];\n*/\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[3728,1072],"id":"359d6095-4c37-4497-aad5-d04f7e6b8bc6","name":"Code4"},{"parameters":{"jsCode":"// --- Config ---\nconst COLS = [\n  'Unidad de Medida',\n];\n\n// ¿Deseas considerar vacío como error?\nconst TREAT_EMPTY_AS_ERROR = false;\n\n// ¿Comparación sin may/minúsculas?\nconst UPPERCASE_MATCH = false;\n\n// --- Helpers de normalización (todo a string y limpio) ---\nconst toStr = (v) => {\n  if (v === null || v === undefined) return '';\n  if (typeof v === 'string') return v;\n  if (typeof v === 'number' || typeof v === 'boolean') return String(v);\n  try { return JSON.stringify(v); } catch { return String(v); }\n};\n\nconst clean = (s) => {\n  let out = toStr(s);\n  out = out.replace(/\\u00A0/g, ' ');                 // NBSP -> espacio normal\n  out = out.replace(/[\\u200B-\\u200D\\uFEFF]/g, '');   // zero-width + BOM\n  out = out.replace(/[\\r\\n\\t]+/g, ' ');              // quita saltos/tabs\n  if (out.normalize) out = out.normalize('NFKC');    // normaliza unicode\n  out = out.trim().replace(/\\s+/g, ' ');             // colapsa espacios\n  if (UPPERCASE_MATCH) out = out.toUpperCase();\n  return out;\n};\n\n// 1) HOJA: solo 4 columnas (strings limpios) + _row\nconst hoja = ($items('Productos') || []).map((it, i) => {\n  const row = it.json || {};\n  const out = { _row: row.row_number ?? (i + 2) };   // asume encabezado en fila 1\n  for (const c of COLS) out[c] = clean(row[c]);\n  return out;\n});\n\n// 2) POSTGRES: array de strings (columna value), limpios + SET para búsqueda O(1)\nconst postgres = ($items('Unidad') || [])\n  .map(it => it?.json?.uomsymbol ?? it?.json?.uomsymbol ?? it?.json?.uomsymbol)\n  .map(clean)\n  .filter(v => v !== '');\nconst postgresSet = new Set(postgres);\n\n// 3) Comparar cada fila/columna contra postgresSet\nconst faltantes = [];\nconst hojaVal = hoja.map(r => {\n  const missingCols = [];\n  for (const col of COLS) {\n    const val = r[col]; // ya limpio\n    if (val === '' && !TREAT_EMPTY_AS_ERROR) continue;\n    if (!postgresSet.has(val)) {\n      missingCols.push({ columna: col, valor: val });\n      faltantes.push({ fila: r._row, columna: col, valor: val });\n    }\n  }\n  return { ...r, esValido: missingCols.length === 0, faltantes: missingCols };\n});\n\n// 4) Mensaje global\nconst mensaje = faltantes.length === 0\n  ? 'PRODUCTOS UNIDAD - Todo Correcto'\n  : 'PRODUCTOS UNIDAD - Errores encontrados:\\n- ' + faltantes\n      .map(e => `Fila ${e.fila} - Columna \"${e.columna}\" valor *${e.valor}* no existe en catálogo`)\n      .join('\\n- ');\n\nreturn [{ json: { mensaje } }];\n\n// 5) Salida única\n/**\n return [{\n  json: {\n    hoja: hojaVal,      // filas con validación por fila\n    postgres,           // lista de cuentas válidas\n    faltantes,          // plano: fila/columna/valor no encontrados\n    totalErrores: faltantes.length,\n    mensaje\n  }\n \n}];\n*/\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[4096,1072],"id":"a3ab3528-953e-499a-b93a-083fb4583a46","name":"Code5"},{"parameters":{"jsCode":"// --- Config ---\nconst COLS = [\n  'Retencion',\n];\n\n// ¿Deseas considerar vacío como error?\nconst TREAT_EMPTY_AS_ERROR = false;\n\n// ¿Comparación sin may/minúsculas?\nconst UPPERCASE_MATCH = false;\n\n// --- Helpers de normalización (todo a string y limpio) ---\nconst toStr = (v) => {\n  if (v === null || v === undefined) return '';\n  if (typeof v === 'string') return v;\n  if (typeof v === 'number' || typeof v === 'boolean') return String(v);\n  try { return JSON.stringify(v); } catch { return String(v); }\n};\n\nconst clean = (s) => {\n  let out = toStr(s);\n  out = out.replace(/\\u00A0/g, ' ');                 // NBSP -> espacio normal\n  out = out.replace(/[\\u200B-\\u200D\\uFEFF]/g, '');   // zero-width + BOM\n  out = out.replace(/[\\r\\n\\t]+/g, ' ');              // quita saltos/tabs\n  if (out.normalize) out = out.normalize('NFKC');    // normaliza unicode\n  out = out.trim().replace(/\\s+/g, ' ');             // colapsa espacios\n  if (UPPERCASE_MATCH) out = out.toUpperCase();\n  return out;\n};\n\n// 1) HOJA: solo 4 columnas (strings limpios) + _row\nconst hoja = ($items('Productos') || []).map((it, i) => {\n  const row = it.json || {};\n  const out = { _row: row.row_number ?? (i + 2) };   // asume encabezado en fila 1\n  for (const c of COLS) out[c] = clean(row[c]);\n  return out;\n});\n\n// 2) POSTGRES: array de strings (columna value), limpios + SET para búsqueda O(1)\nconst postgres = ($items('Retencion') || [])\n  .map(it => it?.json?.name ?? it?.json?.name ?? it?.json?.name)\n  .map(clean)\n  .filter(v => v !== '');\nconst postgresSet = new Set(postgres);\n\n// 3) Comparar cada fila/columna contra postgresSet\nconst faltantes = [];\nconst hojaVal = hoja.map(r => {\n  const missingCols = [];\n  for (const col of COLS) {\n    const val = r[col]; // ya limpio\n    if (val === '' && !TREAT_EMPTY_AS_ERROR) continue;\n    if (!postgresSet.has(val)) {\n      missingCols.push({ columna: col, valor: val });\n      faltantes.push({ fila: r._row, columna: col, valor: val });\n    }\n  }\n  return { ...r, esValido: missingCols.length === 0, faltantes: missingCols };\n});\n\n// 4) Mensaje global\nconst mensaje = faltantes.length === 0\n  ? 'PRODUCTOS RETENCION - Todo Correcto'\n  : 'PRODUCTOS RETENCION - Errores encontrados:\\n- ' + faltantes\n      .map(e => `Fila ${e.fila} - Columna \"${e.columna}\" valor *${e.valor}* no existe en catálogo`)\n      .join('\\n- ');\n\nreturn [{ json: { mensaje } }];\n\n// 5) Salida única\n/**\n return [{\n  json: {\n    hoja: hojaVal,      // filas con validación por fila\n    postgres,           // lista de cuentas válidas\n    faltantes,          // plano: fila/columna/valor no encontrados\n    totalErrores: faltantes.length,\n    mensaje\n  }\n \n}];\n*/\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[4464,1072],"id":"e0af6c3a-95af-47c3-b0d8-74ecd1d147a0","name":"Code6"},{"parameters":{"jsCode":"// === Parámetros ajustables ===\n// Permite letras (incluye tildes), números, espacio, guion, guion bajo,\n// punto, coma, dos puntos, punto y coma, arroba, #, slash y paréntesis.\nconst regexPermitido = /^[A-Za-z0-9ÁÉÍÓÚÜÑáéíóúüñ _\\-\\.,:;@#\\/()]*$/;\n\n// Reglas de longitud específicas\nconst maxLenCodigo = 40;\nconst maxLenNombre = 60;\n\n// Normalización para chequeo de duplicados:\n// - true: compara sin tildes y en mayúsculas (recomendado)\n// - false: compara exactamente como viene en la hoja\nconst normalizarDuplicados = true;\n// ==============================\n\n// --- Helpers ---\nconst normalizeForDup = (s) => {\n  if (!normalizarDuplicados) return s;\n  return s\n    .toString()\n    .trim()\n    .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '') // sin tildes\n    .toUpperCase()\n    .replace(/\\s+/g, ' '); // colapsa espacios internos\n};\n\nconst erroresGlobales = [];\n\n// Mapas para duplicados: key normalizada -> { rows: number[], muestra: string }\nconst dupCodigo = new Map();\nconst dupNombre = new Map();\n\nfor (let i = 0; i < items.length; i++) {\n  const row = items[i].json || {};\n  const rowNumber = row.row_number ?? (i + 2); // asume encabezados en fila 1\n\n  // 1) Reglas de longitud SOLO para Codigo / Nombre (case-sensitive según tu hoja)\n  const codigo = (row.Codigo ?? '').toString().trim();\n  const nombre = (row.Nombre ?? '').toString().trim();\n\n  if (codigo.length > maxLenCodigo) {\n    erroresGlobales.push(`Columna \"Codigo\" en fila ${rowNumber} (${codigo.length} > ${maxLenCodigo})`);\n  }\n  if (nombre.length > maxLenNombre) {\n    erroresGlobales.push(`Columna \"Nombre\" en fila ${rowNumber} (${nombre.length} > ${maxLenNombre})`);\n  }\n\n  // 1.b) Acumular para duplicados (solo si trae algún valor)\n  if (codigo) {\n    const k = normalizeForDup(codigo);\n    if (!dupCodigo.has(k)) dupCodigo.set(k, { rows: [], muestra: codigo });\n    dupCodigo.get(k).rows.push(rowNumber);\n  }\n  if (nombre) {\n    const k = normalizeForDup(nombre);\n    if (!dupNombre.has(k)) dupNombre.set(k, { rows: [], muestra: nombre });\n    dupNombre.get(k).rows.push(rowNumber);\n  }\n\n  // 2) Validación de saltos de línea y caracteres permitidos en TODAS las columnas\n  for (const col of Object.keys(row)) {\n    // omitir metacampos comunes\n    if (col === 'row_number' || col === '_row') continue;\n\n    const raw = row[col];\n    if (raw === null || raw === undefined) continue;\n\n    const str = raw.toString();\n\n    // Saltos de línea\n    if (/\\r|\\n/.test(str)) {\n      erroresGlobales.push(`Columna \"${col}\" en fila ${rowNumber} contiene salto(s) de línea`);\n    }\n\n    // Caracteres no permitidos (se valida sobre el valor completo; trim NO para no ocultar espacios internos)\n    if (!regexPermitido.test(str)) {\n      const muestra = str.length > 40 ? str.slice(0, 40) + '…' : str;\n      erroresGlobales.push(`Columna \"${col}\" en fila ${rowNumber} contiene caracteres no permitidos (muestra: *${muestra}*)`);\n    }\n  }\n}\n\n// 3) Reporte de duplicados\nfor (const [_, info] of dupCodigo.entries()) {\n  if (info.rows.length > 1) {\n    erroresGlobales.push(\n      `Duplicado en columna \"Codigo\": valor \"${info.muestra}\" en filas ${info.rows.join(', ')}`\n    );\n  }\n}\nfor (const [_, info] of dupNombre.entries()) {\n  if (info.rows.length > 1) {\n    erroresGlobales.push(\n      `Duplicado en columna \"Nombre\": valor \"${info.muestra}\" en filas ${info.rows.join(', ')}`\n    );\n  }\n}\n\n// Salida única\nif (erroresGlobales.length === 0) {\n  return [{ json: { mensaje: 'CATEGORIAS - ✅ Todo Correcto' } }];\n} else {\n  return [{\n    json: {\n      mensaje: `CATEGORIAS - 🚫 Errores encontrados:\\n- ${erroresGlobales.join('\\n- ')}`,\n      totalErrores: erroresGlobales.length\n    }\n  }];\n}\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1168,752],"id":"14e11fe6-e12b-496d-a78f-1c07f4ee59f7","name":"Code8","alwaysOutputData":false,"executeOnce":false},{"parameters":{"assignments":{"assignments":[{"id":"8f9461bb-6548-4026-bdbb-65f979254e74","name":"adClient","value":"","type":"string"},{"id":"5c4561c5-da70-456e-a76f-28f2997ea089","name":"adOrg","value":"","type":"string"},{"id":"2c3b801a-15e7-486a-9a6d-dc4985171e77","name":"cell_number","value":"\"0987525109\"","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[2240,768],"id":"6e5a783e-c356-4c7b-8144-061e4353f60f","name":"Edit Fields1"},{"parameters":{"method":"POST","url":"https://agileapichat.sidesoftcorp.com/api/messages/send","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Authorization","value":"Bearer pmo"},{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"bodyParameters":{"parameters":[{"name":"number","value":"={{ $('Edit Fields1').item.json.cell_number }}"},{"name":"body","value":"={{ $('Unificar Errores Categorias').item.json.mensaje }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[2448,768],"id":"7d688b10-3871-4053-a52d-119abae56c3f","name":"Confirmacion3","executeOnce":false},{"parameters":{"documentId":{"__rl":true,"value":"1DqbXWJJqu3Z-1LlYhbbn5BwpR1DqT7WrrluwPeS43aQ","mode":"list","cachedResultName":"CategoriasProductos","cachedResultUrl":"https://docs.google.com/spreadsheets/d/1DqbXWJJqu3Z-1LlYhbbn5BwpR1DqT7WrrluwPeS43aQ/edit?usp=drivesdk"},"sheetName":{"__rl":true,"value":"gid=0","mode":"list","cachedResultName":"Categorias","cachedResultUrl":"https://docs.google.com/spreadsheets/d/1DqbXWJJqu3Z-1LlYhbbn5BwpR1DqT7WrrluwPeS43aQ/edit#gid=0"},"options":{}},"type":"n8n-nodes-base.googleSheets","typeVersion":4.7,"position":[848,752],"id":"c8a265a2-4539-451d-8197-621f1cc68512","name":"Categorias3","credentials":{"googleSheetsOAuth2Api":{"id":"hXtG2Lkk5qYTHIdj","name":"TestSidesoft"}}},{"parameters":{"jsCode":"// --- Config ---\nconst COLS = [\n  'Cta. Ingreso del producto',\n  'Cta. Gastos del producto',\n  'Cta. Inventario',\n  'Cta. Costo del producto',\n];\n\n// ¿Deseas considerar vacío como error?\nconst TREAT_EMPTY_AS_ERROR = false;\n\n// ¿Comparación sin may/minúsculas?\nconst UPPERCASE_MATCH = false;\n\n// --- Helpers de normalización (todo a string y limpio) ---\nconst toStr = (v) => {\n  if (v === null || v === undefined) return '';\n  if (typeof v === 'string') return v;\n  if (typeof v === 'number' || typeof v === 'boolean') return String(v);\n  try { return JSON.stringify(v); } catch { return String(v); }\n};\n\nconst clean = (s) => {\n  let out = toStr(s);\n  out = out.replace(/\\u00A0/g, ' ');                 // NBSP -> espacio normal\n  out = out.replace(/[\\u200B-\\u200D\\uFEFF]/g, '');   // zero-width + BOM\n  out = out.replace(/[\\r\\n\\t]+/g, ' ');              // quita saltos/tabs\n  if (out.normalize) out = out.normalize('NFKC');    // normaliza unicode\n  out = out.trim().replace(/\\s+/g, ' ');             // colapsa espacios\n  if (UPPERCASE_MATCH) out = out.toUpperCase();\n  return out;\n};\n\n// 1) HOJA: solo 4 columnas (strings limpios) + _row\nconst hoja = ($items('Categorias3') || []).map((it, i) => {\n  const row = it.json || {};\n  const out = { _row: row.row_number ?? (i + 2) };   // asume encabezado en fila 1\n  for (const c of COLS) out[c] = clean(row[c]);\n  return out;\n});\n\n// 2) POSTGRES: array de strings (columna value), limpios + SET para búsqueda O(1)\nconst postgres = ($items('Catalogo de Cuentas OB1') || [])\n  .map(it => it?.json?.value ?? it?.json?.VALUE ?? it?.json?.Value)\n  .map(clean)\n  .filter(v => v !== '');\nconst postgresSet = new Set(postgres);\n\n// 3) Comparar cada fila/columna contra postgresSet\nconst faltantes = [];\nconst hojaVal = hoja.map(r => {\n  const missingCols = [];\n  for (const col of COLS) {\n    const val = r[col]; // ya limpio\n    if (val === '' && !TREAT_EMPTY_AS_ERROR) continue;\n    if (!postgresSet.has(val)) {\n      missingCols.push({ columna: col, valor: val });\n      faltantes.push({ fila: r._row, columna: col, valor: val });\n    }\n  }\n  return { ...r, esValido: missingCols.length === 0, faltantes: missingCols };\n});\n\n// 4) Mensaje global\nconst mensaje = faltantes.length === 0\n  ? 'CATEGORIAS - ✅ Todo Correcto'\n  : 'CATEGORIAS - 🚫 Errores encontrados:\\n- ' + faltantes\n      .map(e => `Fila ${e.fila} - Columna \"${e.columna}\" valor *${e.valor}* no existe en catálogo`)\n      .join('\\n- ');\n\nreturn [{ json: { mensaje } }];\n\n// 5) Salida única\n/**\n return [{\n  json: {\n    hoja: hojaVal,      // filas con validación por fila\n    postgres,           // lista de cuentas válidas\n    faltantes,          // plano: fila/columna/valor no encontrados\n    totalErrores: faltantes.length,\n    mensaje\n  }\n \n}];\n*/\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1264,928],"id":"9c73e3bf-c959-4fb7-8892-5eb5003e2556","name":"Code9"},{"parameters":{"operation":"executeQuery","query":"select ev.value \nfrom C_ValidCombination vc \nInner Join C_ElementValue ev on  ev.C_ElementValue_id = vc.account_id ","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[1056,928],"id":"5cec7910-f698-4cb0-9300-bb9293154729","name":"Catalogo de Cuentas OB1","executeOnce":true,"credentials":{"postgres":{"id":"yuQbEbYhio1ra0Ss","name":"GasoManta-CafeMar"}}},{"parameters":{},"type":"n8n-nodes-base.merge","typeVersion":3.2,"position":[1840,768],"id":"3eab2c92-f667-4630-9c12-09ee300b0bf2","name":"Merge2"},{"parameters":{"jsCode":"// Lee todo lo que llega del Merge y decide EXITO / ERROR\nfunction pickMsgs(items) {\n  return items.map(i => String(i.json?.mensaje ?? '').trim()).filter(Boolean);\n}\nfunction hasErr(s) { return /error/i.test(s); }\nfunction bullets(msg) {\n  const m = String(msg).match(/errores?\\s+encontrados:\\s*([\\s\\S]*)/i);\n  const body = (m ? m[1] : msg).replace(/\\r/g, '');\n  const set = new Set(body.split('\\n').map(x => x.trim()).filter(Boolean));\n  return Array.from(set).map(x => x.startsWith('-') ? x : `- ${x}`);\n}\n\nconst msgs = pickMsgs($items('Merge2'));\nconst errs = msgs.filter(hasErr);\n\nlet resultado, mensaje;\nif (errs.length === 0) {\n  resultado = 'EXITO';\n  mensaje = 'CATEGORIAS - ✅ Todo Correcto';\n} else {\n  const all = errs.flatMap(bullets);\n  resultado = 'ERROR';\n  mensaje = `CATEGORIAS - 🚫 Errores encontrados:\\n${all.join('\\n')}`;\n}\n\nreturn [{ json: { resultado, mensaje, totalMensajes: msgs.length, totalConError: errs.length } }];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2048,768],"id":"c68e2e2e-54b4-4c47-b272-0d72779eadcf","name":"Unificar Errores Categorias"},{"parameters":{"jsCode":"// Lee todo lo que llega del Merge y decide EXITO / ERROR\nfunction pickMsgs(items) {\n  return items.map(i => String(i.json?.mensaje ?? '').trim()).filter(Boolean);\n}\nfunction hasErr(s) { return /error/i.test(s); }\nfunction bullets(msg) {\n  const m = String(msg).match(/errores?\\s+encontrados:\\s*([\\s\\S]*)/i);\n  const body = (m ? m[1] : msg).replace(/\\r/g, '');\n  const set = new Set(body.split('\\n').map(x => x.trim()).filter(Boolean));\n  return Array.from(set).map(x => x.startsWith('-') ? x : `- ${x}`);\n}\n\nconst msgs = pickMsgs($items('Merge'));\nconst errs = msgs.filter(hasErr);\n\nlet resultado, mensaje;\nif (errs.length === 0) {\n  resultado = 'EXITO';\n  mensaje = 'PRODUCTOS - ✅ Todo Correcto';\n} else {\n  const all = errs.flatMap(bullets);\n  resultado = 'ERROR';\n  mensaje = `PRODUCTOS - 🚫 Errores encontrados:\\n${all.join('\\n')}`;\n}\n\nreturn [{ json: { resultado, mensaje, totalMensajes: msgs.length, totalConError: errs.length } }];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[5232,848],"id":"28625a9b-c01f-4776-9d1f-8aff55f14abc","name":"Unificar Errores Productos"},{"parameters":{"operation":"executeQuery","query":"select value,name from m_product_category","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[1472,928],"id":"fcf7c815-3d42-4cfd-981e-e19114191832","name":"Catalogo de Categorias OB","executeOnce":true,"credentials":{"postgres":{"id":"yuQbEbYhio1ra0Ss","name":"GasoManta-CafeMar"}}},{"parameters":{"jsCode":"// === Configuración ===\nconst NORMALIZAR = true;   // true: sin tildes, MAYÚSCULAS y espacios colapsados\nconst TRIM_EMPTY = true;   // true: ignora vacíos\n\n// Normalizadores\nconst cleanDisplay = (s) => {\n  let out = (s ?? '').toString();\n  out = out.replace(/\\u00A0/g, ' ');\n  out = out.replace(/[\\u200B-\\u200D\\uFEFF]/g, '');\n  out = out.replace(/[\\r\\n\\t]+/g, ' ');\n  if (out.normalize) out = out.normalize('NFKC');\n  return out.trim().replace(/\\s+/g, ' ');\n};\nconst norm = (s) => {\n  let out = cleanDisplay(s);\n  if (TRIM_EMPTY && out === '') return '';\n  if (!NORMALIZAR) return out;\n  return out\n    .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '') // sin tildes\n    .toUpperCase();\n};\n\n// === 1) Datasheet (Google Sheets: nodo 'Categorias3') ===\n// Debe traer columnas 'Codigo' y 'Nombre'\nconst sheetRows = ($items('Categorias3') || []).map((it, i) => {\n  const r = it.json || {};\n  return {\n    rowNumber: r.row_number ?? (i + 2), // encabezado en fila 1\n    CodigoRaw: cleanDisplay(r.Codigo),\n    CodigoNorm: norm(r.Codigo),\n    NombreRaw: cleanDisplay(r.Nombre),\n    NombreNorm: norm(r.Nombre),\n  };\n});\n\n// === 2) Catálogo existente en OB (Postgres: nodo 'Catalogo de Categorias OB') ===\n// Query: select value, name from m_product_category\nconst obRows = ($items('Catalogo de Categorias OB') || []).map(it => it.json || {});\nconst obCodigos = new Set(obRows.map(r => norm(r.value)).filter(v => v !== ''));\nconst obNombres = new Set(obRows.map(r => norm(r.name)).filter(v => v !== ''));\n\n// === 3) Acumular coincidencias (sheet que ya existen en OB) ===\n// Guardamos por clave normalizada para agrupar filas y mostrar un solo mensaje por valor\nconst dupCodigo = new Map(); // key -> { muestra, rows[] }\nconst dupNombre = new Map();\n\nfor (const r of sheetRows) {\n  // Código ya existente en OB\n  if (r.CodigoNorm) {\n    if (obCodigos.has(r.CodigoNorm)) {\n      const e = dupCodigo.get(r.CodigoNorm) || { muestra: r.CodigoRaw || '(vacío)', rows: [] };\n      e.rows.push(r.rowNumber);\n      dupCodigo.set(r.CodigoNorm, e);\n    }\n  }\n\n  // Nombre ya existente en OB\n  if (r.NombreNorm) {\n    if (obNombres.has(r.NombreNorm)) {\n      const e = dupNombre.get(r.NombreNorm) || { muestra: r.NombreRaw || '(vacío)', rows: [] };\n      e.rows.push(r.rowNumber);\n      dupNombre.set(r.NombreNorm, e);\n    }\n  }\n}\n\n// === 4) Construir mensajes en el formato solicitado ===\n// \"Duplicado en columna \"Nombre\": valor \"EXTRA\" en filas 2, 3\"\nconst errores = [];\n\n// Ordenar por valor para salida estable\nconst sortByMuestra = (a, b) => a.muestra.localeCompare(b.muestra, 'es');\n\n[...dupCodigo.values()].sort(sortByMuestra).forEach(e => {\n  e.rows.sort((a, b) => a - b);\n  errores.push(`Duplicado en columna \"Codigo\": valor \"${e.muestra}\" en filas ${e.rows.join(', ')}`);\n});\n[...dupNombre.values()].sort(sortByMuestra).forEach(e => {\n  e.rows.sort((a, b) => a - b);\n  errores.push(`Duplicado en columna \"Nombre\": valor \"${e.muestra}\" en filas ${e.rows.join(', ')}`);\n});\n\n// === 5) Salida ===\nconst mensaje = errores.length === 0\n  ? 'CATEGORIAS (existentes en OB) - ✅ No se encontraron Códigos/Nombre presentes en OB'\n  : 'CATEGORIAS (existentes en OB) - 🚫 Error Coincidencias encontradas:\\n- ' + errores.join('\\n- ');\n\nreturn [{\n  json: {\n    mensaje,\n    totalErrores: errores.length\n  }\n}];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1680,928],"id":"109625f1-7267-468b-88e4-41814acae30a","name":"Categorias Existentes en OB"},{"parameters":{"operation":"executeQuery","query":"select value, name from m_product","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[4640,1072],"id":"ab2ed4e1-5059-46e7-91ff-2dfe528ab198","name":"Catalogo Productos OB","executeOnce":true,"credentials":{"postgres":{"id":"yuQbEbYhio1ra0Ss","name":"GasoManta-CafeMar"}}},{"parameters":{"jsCode":"// === Configuración ===\nconst NORMALIZAR = true;   // true: sin tildes, MAYÚSCULAS y espacios colapsados\nconst TRIM_EMPTY = true;   // true: ignora vacíos\n\n// Normalizadores\nconst cleanDisplay = (s) => {\n  let out = (s ?? '').toString();\n  out = out.replace(/\\u00A0/g, ' ');\n  out = out.replace(/[\\u200B-\\u200D\\uFEFF]/g, '');\n  out = out.replace(/[\\r\\n\\t]+/g, ' ');\n  if (out.normalize) out = out.normalize('NFKC');\n  return out.trim().replace(/\\s+/g, ' ');\n};\nconst norm = (s) => {\n  let out = cleanDisplay(s);\n  if (TRIM_EMPTY && out === '') return '';\n  if (!NORMALIZAR) return out;\n  return out\n    .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '') // sin tildes\n    .toUpperCase();\n};\n\n// === 1) Datasheet (Google Sheets: nodo 'Categorias3') ===\n// Debe traer columnas 'Codigo' y 'Nombre'\nconst sheetRows = ($items('Productos') || []).map((it, i) => {\n  const r = it.json || {};\n  return {\n    rowNumber: r.row_number ?? (i + 2), // encabezado en fila 1\n    CodigoRaw: cleanDisplay(r.Codigo),\n    CodigoNorm: norm(r.Codigo),\n    NombreRaw: cleanDisplay(r.Nombre),\n    NombreNorm: norm(r.Nombre),\n  };\n});\n\n// === 2) Catálogo existente en OB (Postgres: nodo 'Catalogo de Categorias OB') ===\n// Query: select value, name from m_product_category\nconst obRows = ($items('Catalogo Productos OB') || []).map(it => it.json || {});\nconst obCodigos = new Set(obRows.map(r => norm(r.value)).filter(v => v !== ''));\nconst obNombres = new Set(obRows.map(r => norm(r.name)).filter(v => v !== ''));\n\n// === 3) Acumular coincidencias (sheet que ya existen en OB) ===\n// Guardamos por clave normalizada para agrupar filas y mostrar un solo mensaje por valor\nconst dupCodigo = new Map(); // key -> { muestra, rows[] }\nconst dupNombre = new Map();\n\nfor (const r of sheetRows) {\n  // Código ya existente en OB\n  if (r.CodigoNorm) {\n    if (obCodigos.has(r.CodigoNorm)) {\n      const e = dupCodigo.get(r.CodigoNorm) || { muestra: r.CodigoRaw || '(vacío)', rows: [] };\n      e.rows.push(r.rowNumber);\n      dupCodigo.set(r.CodigoNorm, e);\n    }\n  }\n\n  // Nombre ya existente en OB\n  if (r.NombreNorm) {\n    if (obNombres.has(r.NombreNorm)) {\n      const e = dupNombre.get(r.NombreNorm) || { muestra: r.NombreRaw || '(vacío)', rows: [] };\n      e.rows.push(r.rowNumber);\n      dupNombre.set(r.NombreNorm, e);\n    }\n  }\n}\n\n// === 4) Construir mensajes en el formato solicitado ===\n// \"Duplicado en columna \"Nombre\": valor \"EXTRA\" en filas 2, 3\"\nconst errores = [];\n\n// Ordenar por valor para salida estable\nconst sortByMuestra = (a, b) => a.muestra.localeCompare(b.muestra, 'es');\n\n[...dupCodigo.values()].sort(sortByMuestra).forEach(e => {\n  e.rows.sort((a, b) => a - b);\n  errores.push(`Duplicado en columna \"Codigo\": valor \"${e.muestra}\" en filas ${e.rows.join(', ')}`);\n});\n[...dupNombre.values()].sort(sortByMuestra).forEach(e => {\n  e.rows.sort((a, b) => a - b);\n  errores.push(`Duplicado en columna \"Nombre\": valor \"${e.muestra}\" en filas ${e.rows.join(', ')}`);\n});\n\n// === 5) Salida ===\nconst mensaje = errores.length === 0\n  ? 'PRODUCTOS (existentes en OB) - ✅ No se encontraron Códigos/Nombre presentes en OB'\n  : 'PRODUCTOS (existentes en OB) - 🚫 Error Coincidencias encontradas:\\n- ' + errores.join('\\n- ');\n\nreturn [{\n  json: {\n    mensaje,\n    totalErrores: errores.length\n  }\n}];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[4848,1072],"id":"f53fcd3c-08dd-48f3-90a8-6a57544e63e6","name":"Productos Existentes en OB"},{"parameters":{"numberInputs":6},"type":"n8n-nodes-base.merge","typeVersion":3.2,"position":[5040,784],"id":"27419c14-2024-4d7c-bbaf-586f38255f99","name":"Merge"},{"parameters":{"assignments":{"assignments":[{"id":"49f12a44-11ae-4849-94b4-4c0b492c3641","name":"uploadFilesDirectory","value":"1d-VV89ew65F9Ui_JJuzoPwCBpE-yUAHI","type":"string"},{"id":"ff554178-aa16-4be5-bfb3-9368f7a56607","name":"convertedFilesDirectory","value":"18Wrn5uu6ThumIeg0yKVQw2zn31cT-YeQ","type":"string"},{"id":"6fb746c8-33c8-48f2-8d85-b2ff886625d5","name":"decryptApi","value":"https://admchat.duckdns.org/wa-decrypt/decrypt-document","type":"string"},{"id":"f197f9b9-0992-47b5-8faf-85fecda67503","name":"fileName","value":"CategoriasProductos","type":"string"},{"id":"1071c733-64c4-46b4-9933-ad3c843c05fb","name":"subworkflowID","value":"gqt6yXfnufkwZYCz","type":"string"}]},"includeOtherFields":true,"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-720,16],"id":"8f4b94c3-d0b5-413f-b917-c2d9e93ddfe0","name":"Variables"},{"parameters":{"assignments":{"assignments":[{"id":"49f12a44-11ae-4849-94b4-4c0b492c3641","name":"uploadFilesDirectory","value":"1d-VV89ew65F9Ui_JJuzoPwCBpE-yUAHI","type":"string"},{"id":"ff554178-aa16-4be5-bfb3-9368f7a56607","name":"convertedFilesDirectory","value":"18Wrn5uu6ThumIeg0yKVQw2zn31cT-YeQ","type":"string"},{"id":"6fb746c8-33c8-48f2-8d85-b2ff886625d5","name":"decryptApi","value":"https://admchat.duckdns.org/wa-decrypt/decrypt-document","type":"string"},{"id":"e85da8f3-3311-4594-b365-55aadab8176e","name":"fileName","value":"CategoriasProductos","type":"string"},{"id":"00dbcc54-57ea-4710-9124-a6979416f3cd","name":"subworkflowID","value":"gqt6yXfnufkwZYCz","type":"string"}]},"includeOtherFields":true,"options":{"stripBinary":true}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-1152,-288],"id":"e42c0067-2ddf-4f95-84ba-f376a0aace3c","name":"Variables1"},{"parameters":{"operation":"binaryToPropery","binaryPropertyName":"Plantilla","options":{}},"type":"n8n-nodes-base.extractFromFile","typeVersion":1,"position":[-1328,-288],"id":"b6163f32-7f83-4752-982d-28d53c5bc5ae","name":"Extract from File"},{"parameters":{"operation":"toBinary","sourceProperty":"data","options":{}},"type":"n8n-nodes-base.convertToFile","typeVersion":1.1,"position":[-592,-304],"id":"8d6a23df-ea5d-4218-904c-9b349255e090","name":"Convert to File"},{"parameters":{"workflowId":{"__rl":true,"value":"={{ $('Variables1').item.json.subworkflowID }}","mode":"id"},"workflowInputs":{"mappingMode":"defineBelow","value":{},"matchingColumns":[],"schema":[],"attemptToConvertTypes":false,"convertFieldsToString":true},"options":{"waitForSubWorkflow":true}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[-944,-416],"id":"af55610b-754f-47d8-bb1d-bbd3e21a295b","name":"Execute Workflow","alwaysOutputData":true,"notesInFlow":false,"executeOnce":false,"retryOnFail":false},{"parameters":{"mode":"chooseBranch","useDataOfInput":2},"type":"n8n-nodes-base.merge","typeVersion":3.2,"position":[-736,-304],"id":"efcc79cb-0e8e-4730-b717-c5e96c8d03b7","name":"Merge3"},{"parameters":{"workflowId":{"__rl":true,"value":"={{ $('Variables').item.json.subworkflowID }}","mode":"id"},"workflowInputs":{"mappingMode":"defineBelow","value":{},"matchingColumns":[],"schema":[],"attemptToConvertTypes":false,"convertFieldsToString":true},"options":{"waitForSubWorkflow":true}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[-512,-96],"id":"5adfd57c-284f-43df-8d51-b3676c4eea03","name":"Execute Workflow1","alwaysOutputData":true,"notesInFlow":false,"executeOnce":false,"retryOnFail":false},{"parameters":{"mode":"chooseBranch","useDataOfInput":2},"type":"n8n-nodes-base.merge","typeVersion":3.2,"position":[-304,0],"id":"a6253a2c-4e6c-4199-befe-a87ab1b32653","name":"Merge4"}],"connections":{"Convert File":{"main":[[{"node":"Categorias","type":"main","index":0}]]},"Code":{"main":[[{"node":"Switch1","type":"main","index":0}]]},"Webhook2":{"main":[[{"node":"Homologar_msg1","type":"main","index":0}]]},"Switch1":{"main":[[{"node":"Merge1","type":"main","index":0}],[{"node":"Merge1","type":"main","index":0}],[{"node":"Variables","type":"main","index":0}],[{"node":"Merge1","type":"main","index":0}],[{"node":"Merge1","type":"main","index":0}],[{"node":"Merge1","type":"main","index":0}]]},"Homologar_msg1":{"main":[[{"node":"Code","type":"main","index":0},{"node":"Merge1","type":"main","index":1}]]},"Merge1":{"main":[[{"node":"Response6","type":"main","index":0}]]},"HTTP Request4":{"main":[[{"node":"Upload file","type":"main","index":0}]]},"Convert File1":{"main":[[{"node":"Categorias","type":"main","index":0}],[]]},"Upload file":{"main":[[{"node":"Convert File1","type":"main","index":0}]]},"CargarProductos":{"main":[[{"node":"Extract from File","type":"main","index":0}]]},"Upload file1":{"main":[[{"node":"Convert File","type":"main","index":0}]]},"Productos":{"main":[[{"node":"Code1","type":"main","index":0},{"node":"Cuentas","type":"main","index":0}]]},"Code1":{"main":[[{"node":"Merge","type":"main","index":0}]]},"ProductCategory":{"main":[[{"node":"Code3","type":"main","index":0}]]},"TaxCategory":{"main":[[{"node":"Code4","type":"main","index":0}]]},"Unidad":{"main":[[{"node":"Code5","type":"main","index":0}]]},"Retencion":{"main":[[{"node":"Code6","type":"main","index":0}]]},"Cuentas":{"main":[[{"node":"ProductCategory","type":"main","index":0}]]},"Code3":{"main":[[{"node":"TaxCategory","type":"main","index":0},{"node":"Merge","type":"main","index":1}]]},"Code4":{"main":[[{"node":"Unidad","type":"main","index":0},{"node":"Merge","type":"main","index":2}]]},"Code5":{"main":[[{"node":"Retencion","type":"main","index":0},{"node":"Merge","type":"main","index":3}]]},"Code6":{"main":[[{"node":"Merge","type":"main","index":4},{"node":"Catalogo Productos OB","type":"main","index":0}]]},"Code8":{"main":[[{"node":"Merge2","type":"main","index":0}]]},"Edit Fields1":{"main":[[{"node":"Confirmacion3","type":"main","index":0}]]},"Confirmacion3":{"main":[[{"node":"Productos","type":"main","index":0}]]},"Categorias3":{"main":[[{"node":"Code8","type":"main","index":0},{"node":"Catalogo de Cuentas OB1","type":"main","index":0}]]},"Code9":{"main":[[{"node":"Catalogo de Categorias OB","type":"main","index":0}]]},"Catalogo de Cuentas OB1":{"main":[[{"node":"Code9","type":"main","index":0}]]},"Merge2":{"main":[[{"node":"Unificar Errores Categorias","type":"main","index":0}]]},"Unificar Errores Categorias":{"main":[[{"node":"Edit Fields1","type":"main","index":0}]]},"Unificar Errores Productos":{"main":[[{"node":"Confirmacion","type":"main","index":0}]]},"Catalogo de Categorias OB":{"main":[[{"node":"Categorias Existentes en OB","type":"main","index":0}]]},"Categorias Existentes en OB":{"main":[[{"node":"Merge2","type":"main","index":1}]]},"Catalogo Productos OB":{"main":[[{"node":"Productos Existentes en OB","type":"main","index":0}]]},"Productos Existentes en OB":{"main":[[{"node":"Merge","type":"main","index":5}]]},"Merge":{"main":[[{"node":"Unificar Errores Productos","type":"main","index":0}]]},"Variables":{"main":[[{"node":"Execute Workflow1","type":"main","index":0},{"node":"Merge4","type":"main","index":1}]]},"Variables1":{"main":[[{"node":"Execute Workflow","type":"main","index":0},{"node":"Merge3","type":"main","index":1}]]},"Extract from File":{"main":[[{"node":"Variables1","type":"main","index":0}]]},"Convert to File":{"main":[[{"node":"Upload file1","type":"main","index":0}]]},"Execute Workflow":{"main":[[{"node":"Merge3","type":"main","index":0}]]},"Merge3":{"main":[[{"node":"Convert to File","type":"main","index":0}]]},"Execute Workflow1":{"main":[[{"node":"Merge4","type":"main","index":0}]]},"Merge4":{"main":[[{"node":"HTTP Request4","type":"main","index":0}]]},"Categorias":{"main":[[{"node":"Code8","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":{"node:Google Drive Trigger":{"lastTimeChecked":"2025-10-08T14:27:45Z"}},"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"31d4add7-2841-4b34-aaef-ff02793a0005","triggerCount":2,"shared":[{"createdAt":"2025-10-08T14:17:22.017Z","updatedAt":"2025-10-08T14:17:22.017Z","role":"workflow:owner","workflowId":"AQYnGfAHDaFwgYIg","projectId":"Bev2pwmvUzes1BM7"}],"tags":[]}